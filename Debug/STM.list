
STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d6c  08003d6c  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08003d6c  08003d6c  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d6c  08003d6c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08003d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000210  08003f84  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08003f84  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fca9  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002583  00000000  00000000  0002fee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000333a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dce  00000000  00000000  000341d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010382  00000000  00000000  0004bfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000888b0  00000000  00000000  0005c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004070  00000000  00000000  000e4c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000210 	.word	0x20000210
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d2c 	.word	0x08003d2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000214 	.word	0x20000214
 8000148:	08003d2c 	.word	0x08003d2c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2uiz>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	d20e      	bcs.n	80005de <__aeabi_f2uiz+0x22>
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005c4:	d30b      	bcc.n	80005de <__aeabi_f2uiz+0x22>
 80005c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d409      	bmi.n	80005e4 <__aeabi_f2uiz+0x28>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d8:	fa23 f002 	lsr.w	r0, r3, r2
 80005dc:	4770      	bx	lr
 80005de:	f04f 0000 	mov.w	r0, #0
 80005e2:	4770      	bx	lr
 80005e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005e8:	d101      	bne.n	80005ee <__aeabi_f2uiz+0x32>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	d102      	bne.n	80005f4 <__aeabi_f2uiz+0x38>
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	4770      	bx	lr
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <ILI9341_DrawFilledRectangleCoord>:
 * @param X1 The X-coordinate of the bottom-right corner of the rectangle.
 * @param Y1 The Y-coordinate of the bottom-right corner of the rectangle.
 * @param color The color of the rectangle.
 */
void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af02      	add	r7, sp, #8
 8000602:	4604      	mov	r4, r0
 8000604:	4608      	mov	r0, r1
 8000606:	4611      	mov	r1, r2
 8000608:	461a      	mov	r2, r3
 800060a:	4623      	mov	r3, r4
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	4603      	mov	r3, r0
 8000610:	80bb      	strh	r3, [r7, #4]
 8000612:	460b      	mov	r3, r1
 8000614:	807b      	strh	r3, [r7, #2]
 8000616:	4613      	mov	r3, r2
 8000618:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8000636:	887a      	ldrh	r2, [r7, #2]
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	da01      	bge.n	8000648 <ILI9341_DrawFilledRectangleCoord+0x4c>
 8000644:	2301      	movs	r3, #1
 8000646:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 800064c:	883a      	ldrh	r2, [r7, #0]
 800064e:	88bb      	ldrh	r3, [r7, #4]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	2b00      	cmp	r3, #0
 8000658:	da01      	bge.n	800065e <ILI9341_DrawFilledRectangleCoord+0x62>
 800065a:	2301      	movs	r3, #1
 800065c:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 800065e:	7cfb      	ldrb	r3, [r7, #19]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d106      	bne.n	8000672 <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 8000664:	887a      	ldrh	r2, [r7, #2]
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	823b      	strh	r3, [r7, #16]
 8000670:	e005      	b.n	800067e <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 8000672:	88fa      	ldrh	r2, [r7, #6]
 8000674:	887b      	ldrh	r3, [r7, #2]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 800067e:	7cbb      	ldrb	r3, [r7, #18]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d106      	bne.n	8000692 <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 8000684:	883a      	ldrh	r2, [r7, #0]
 8000686:	88bb      	ldrh	r3, [r7, #4]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	81fb      	strh	r3, [r7, #14]
 8000690:	e005      	b.n	800069e <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 8000692:	88ba      	ldrh	r2, [r7, #4]
 8000694:	883b      	ldrh	r3, [r7, #0]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 800069a:	883b      	ldrh	r3, [r7, #0]
 800069c:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 800069e:	8abc      	ldrh	r4, [r7, #20]
 80006a0:	8afa      	ldrh	r2, [r7, #22]
 80006a2:	89f9      	ldrh	r1, [r7, #14]
 80006a4:	8a38      	ldrh	r0, [r7, #16]
 80006a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4623      	mov	r3, r4
 80006ac:	f000 fb2c 	bl	8000d08 <ILI9341_DrawRectangle>
}
 80006b0:	bf00      	nop
 80006b2:	371c      	adds	r7, #28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd90      	pop	{r4, r7, pc}

080006b8 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_SPI_TxCpltCallback+0x24>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d105      	bne.n	80006d4 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <HAL_SPI_TxCpltCallback+0x28>)
 80006d0:	f001 fd0a 	bl	80020e8 <HAL_GPIO_WritePin>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000270 	.word	0x20000270
 80006e0:	40010c00 	.word	0x40010c00

080006e4 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80006ee:	bf00      	nop
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <ILI9341_SPI_Tx+0x30>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d1f8      	bne.n	80006f0 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	2201      	movs	r2, #1
 8000702:	4619      	mov	r1, r3
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <ILI9341_SPI_Tx+0x30>)
 8000706:	f002 fb03 	bl	8002d10 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000270 	.word	0x20000270

08000718 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000724:	bf00      	nop
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <ILI9341_SPI_TxBuffer+0x30>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	2b02      	cmp	r3, #2
 8000732:	d1f8      	bne.n	8000726 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	461a      	mov	r2, r3
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <ILI9341_SPI_TxBuffer+0x30>)
 800073c:	f002 fae8 	bl	8002d10 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000270 	.word	0x20000270

0800074c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000756:	2200      	movs	r2, #0
 8000758:	2101      	movs	r1, #1
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <ILI9341_WriteCommand+0x30>)
 800075c:	f001 fcc4 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <ILI9341_WriteCommand+0x30>)
 8000768:	f001 fcbe 	bl	80020e8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ffb8 	bl	80006e4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40010c00 	.word	0x40010c00

08000780 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800078a:	2201      	movs	r2, #1
 800078c:	2101      	movs	r1, #1
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <ILI9341_WriteData+0x30>)
 8000790:	f001 fcaa 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <ILI9341_WriteData+0x30>)
 800079c:	f001 fca4 	bl	80020e8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff9e 	bl	80006e4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80007c0:	2201      	movs	r2, #1
 80007c2:	2101      	movs	r1, #1
 80007c4:	4808      	ldr	r0, [pc, #32]	; (80007e8 <ILI9341_WriteBuffer+0x34>)
 80007c6:	f001 fc8f 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <ILI9341_WriteBuffer+0x34>)
 80007d2:	f001 fc89 	bl	80020e8 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80007d6:	887b      	ldrh	r3, [r7, #2]
 80007d8:	4619      	mov	r1, r3
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ff9c 	bl	8000718 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40010c00 	.word	0x40010c00

080007ec <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4604      	mov	r4, r0
 80007f4:	4608      	mov	r0, r1
 80007f6:	4611      	mov	r1, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	4623      	mov	r3, r4
 80007fc:	80fb      	strh	r3, [r7, #6]
 80007fe:	4603      	mov	r3, r0
 8000800:	80bb      	strh	r3, [r7, #4]
 8000802:	460b      	mov	r3, r1
 8000804:	807b      	strh	r3, [r7, #2]
 8000806:	4613      	mov	r3, r2
 8000808:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	b29b      	uxth	r3, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ff8e 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2104      	movs	r1, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffbc 	bl	80007b4 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 800083c:	88bb      	ldrh	r3, [r7, #4]
 800083e:	0a1b      	lsrs	r3, r3, #8
 8000840:	b29b      	uxth	r3, r3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 800084c:	883b      	ldrh	r3, [r7, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	b29b      	uxth	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000856:	883b      	ldrh	r3, [r7, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 800085c:	202b      	movs	r0, #43	; 0x2b
 800085e:	f7ff ff75 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2104      	movs	r1, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ffa3 	bl	80007b4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800086e:	202c      	movs	r0, #44	; 0x2c
 8000870:	f7ff ff6c 	bl	800074c <ILI9341_WriteCommand>
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}

0800087c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000880:	2200      	movs	r2, #0
 8000882:	2102      	movs	r1, #2
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <ILI9341_Reset+0x40>)
 8000886:	f001 fc2f 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 ff88 	bl	80017a0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <ILI9341_Reset+0x40>)
 8000898:	f001 fc26 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f000 ff7f 	bl	80017a0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80008a2:	2201      	movs	r2, #1
 80008a4:	2102      	movs	r1, #2
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <ILI9341_Reset+0x40>)
 80008a8:	f001 fc1e 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b2:	4802      	ldr	r0, [pc, #8]	; (80008bc <ILI9341_Reset+0x40>)
 80008b4:	f001 fc18 	bl	80020e8 <HAL_GPIO_WritePin>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40010c00 	.word	0x40010c00

080008c0 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80008c4:	2201      	movs	r2, #1
 80008c6:	2102      	movs	r1, #2
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <ILI9341_Enable+0x14>)
 80008ca:	f001 fc0d 	bl	80020e8 <HAL_GPIO_WritePin>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <ILI9341_Init>:

void ILI9341_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80008dc:	f7ff fff0 	bl	80008c0 <ILI9341_Enable>
	ILI9341_Reset();
 80008e0:	f7ff ffcc 	bl	800087c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff ff31 	bl	800074c <ILI9341_WriteCommand>
	HAL_Delay(10);
 80008ea:	200a      	movs	r0, #10
 80008ec:	f000 ff58 	bl	80017a0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80008f0:	20cb      	movs	r0, #203	; 0xcb
 80008f2:	f7ff ff2b 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80008f6:	2039      	movs	r0, #57	; 0x39
 80008f8:	f7ff ff42 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80008fc:	202c      	movs	r0, #44	; 0x2c
 80008fe:	f7ff ff3f 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ff3c 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000908:	2034      	movs	r0, #52	; 0x34
 800090a:	f7ff ff39 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff ff36 	bl	8000780 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000914:	20cf      	movs	r0, #207	; 0xcf
 8000916:	f7ff ff19 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff ff30 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000920:	20c1      	movs	r0, #193	; 0xc1
 8000922:	f7ff ff2d 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000926:	2030      	movs	r0, #48	; 0x30
 8000928:	f7ff ff2a 	bl	8000780 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 800092c:	20e8      	movs	r0, #232	; 0xe8
 800092e:	f7ff ff0d 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000932:	2085      	movs	r0, #133	; 0x85
 8000934:	f7ff ff24 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ff21 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800093e:	2078      	movs	r0, #120	; 0x78
 8000940:	f7ff ff1e 	bl	8000780 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000944:	20ea      	movs	r0, #234	; 0xea
 8000946:	f7ff ff01 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff ff18 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff ff15 	bl	8000780 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000956:	20ed      	movs	r0, #237	; 0xed
 8000958:	f7ff fef8 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800095c:	2064      	movs	r0, #100	; 0x64
 800095e:	f7ff ff0f 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000962:	2003      	movs	r0, #3
 8000964:	f7ff ff0c 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000968:	2012      	movs	r0, #18
 800096a:	f7ff ff09 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800096e:	2081      	movs	r0, #129	; 0x81
 8000970:	f7ff ff06 	bl	8000780 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000974:	20f7      	movs	r0, #247	; 0xf7
 8000976:	f7ff fee9 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800097a:	2020      	movs	r0, #32
 800097c:	f7ff ff00 	bl	8000780 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000980:	20c0      	movs	r0, #192	; 0xc0
 8000982:	f7ff fee3 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000986:	2023      	movs	r0, #35	; 0x23
 8000988:	f7ff fefa 	bl	8000780 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800098c:	20c1      	movs	r0, #193	; 0xc1
 800098e:	f7ff fedd 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000992:	2010      	movs	r0, #16
 8000994:	f7ff fef4 	bl	8000780 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000998:	20c5      	movs	r0, #197	; 0xc5
 800099a:	f7ff fed7 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800099e:	203e      	movs	r0, #62	; 0x3e
 80009a0:	f7ff feee 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80009a4:	2028      	movs	r0, #40	; 0x28
 80009a6:	f7ff feeb 	bl	8000780 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80009aa:	20c7      	movs	r0, #199	; 0xc7
 80009ac:	f7ff fece 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80009b0:	2086      	movs	r0, #134	; 0x86
 80009b2:	f7ff fee5 	bl	8000780 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80009b6:	2036      	movs	r0, #54	; 0x36
 80009b8:	f7ff fec8 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80009bc:	2048      	movs	r0, #72	; 0x48
 80009be:	f7ff fedf 	bl	8000780 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80009c2:	203a      	movs	r0, #58	; 0x3a
 80009c4:	f7ff fec2 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80009c8:	2055      	movs	r0, #85	; 0x55
 80009ca:	f7ff fed9 	bl	8000780 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80009ce:	20b1      	movs	r0, #177	; 0xb1
 80009d0:	f7ff febc 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff fed3 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80009da:	2018      	movs	r0, #24
 80009dc:	f7ff fed0 	bl	8000780 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80009e0:	20b6      	movs	r0, #182	; 0xb6
 80009e2:	f7ff feb3 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80009e6:	2008      	movs	r0, #8
 80009e8:	f7ff feca 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80009ec:	2082      	movs	r0, #130	; 0x82
 80009ee:	f7ff fec7 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80009f2:	2027      	movs	r0, #39	; 0x27
 80009f4:	f7ff fec4 	bl	8000780 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80009f8:	20f2      	movs	r0, #242	; 0xf2
 80009fa:	f7ff fea7 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff febe 	bl	8000780 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000a04:	2026      	movs	r0, #38	; 0x26
 8000a06:	f7ff fea1 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff feb8 	bl	8000780 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000a10:	20e0      	movs	r0, #224	; 0xe0
 8000a12:	f7ff fe9b 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f7ff feb2 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000a1c:	2031      	movs	r0, #49	; 0x31
 8000a1e:	f7ff feaf 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000a22:	202b      	movs	r0, #43	; 0x2b
 8000a24:	f7ff feac 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000a28:	200c      	movs	r0, #12
 8000a2a:	f7ff fea9 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a2e:	200e      	movs	r0, #14
 8000a30:	f7ff fea6 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000a34:	2008      	movs	r0, #8
 8000a36:	f7ff fea3 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000a3a:	204e      	movs	r0, #78	; 0x4e
 8000a3c:	f7ff fea0 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000a40:	20f1      	movs	r0, #241	; 0xf1
 8000a42:	f7ff fe9d 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000a46:	2037      	movs	r0, #55	; 0x37
 8000a48:	f7ff fe9a 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000a4c:	2007      	movs	r0, #7
 8000a4e:	f7ff fe97 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000a52:	2010      	movs	r0, #16
 8000a54:	f7ff fe94 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f7ff fe91 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a5e:	200e      	movs	r0, #14
 8000a60:	f7ff fe8e 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000a64:	2009      	movs	r0, #9
 8000a66:	f7ff fe8b 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fe88 	bl	8000780 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000a70:	20e1      	movs	r0, #225	; 0xe1
 8000a72:	f7ff fe6b 	bl	800074c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fe82 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a7c:	200e      	movs	r0, #14
 8000a7e:	f7ff fe7f 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000a82:	2014      	movs	r0, #20
 8000a84:	f7ff fe7c 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f7ff fe79 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000a8e:	2011      	movs	r0, #17
 8000a90:	f7ff fe76 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000a94:	2007      	movs	r0, #7
 8000a96:	f7ff fe73 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000a9a:	2031      	movs	r0, #49	; 0x31
 8000a9c:	f7ff fe70 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000aa0:	20c1      	movs	r0, #193	; 0xc1
 8000aa2:	f7ff fe6d 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000aa6:	2048      	movs	r0, #72	; 0x48
 8000aa8:	f7ff fe6a 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000aac:	2008      	movs	r0, #8
 8000aae:	f7ff fe67 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f7ff fe64 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f7ff fe61 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000abe:	2031      	movs	r0, #49	; 0x31
 8000ac0:	f7ff fe5e 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000ac4:	2036      	movs	r0, #54	; 0x36
 8000ac6:	f7ff fe5b 	bl	8000780 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f7ff fe58 	bl	8000780 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000ad0:	2011      	movs	r0, #17
 8000ad2:	f7ff fe3b 	bl	800074c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f000 fe62 	bl	80017a0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000adc:	2029      	movs	r0, #41	; 0x29
 8000ade:	f7ff fe35 	bl	800074c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f802 	bl	8000aec <ILI9341_SetRotation>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000af6:	2036      	movs	r0, #54	; 0x36
 8000af8:	f7ff fe28 	bl	800074c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 fe4f 	bl	80017a0 <HAL_Delay>

	switch(rotation)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d837      	bhi.n	8000b78 <ILI9341_SetRotation+0x8c>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <ILI9341_SetRotation+0x24>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b37 	.word	0x08000b37
 8000b18:	08000b4d 	.word	0x08000b4d
 8000b1c:	08000b63 	.word	0x08000b63
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000b20:	2048      	movs	r0, #72	; 0x48
 8000b22:	f7ff fe2d 	bl	8000780 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <ILI9341_SetRotation+0x98>)
 8000b28:	22f0      	movs	r2, #240	; 0xf0
 8000b2a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <ILI9341_SetRotation+0x9c>)
 8000b2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b32:	801a      	strh	r2, [r3, #0]
		break;
 8000b34:	e021      	b.n	8000b7a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000b36:	2028      	movs	r0, #40	; 0x28
 8000b38:	f7ff fe22 	bl	8000780 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <ILI9341_SetRotation+0x98>)
 8000b3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b42:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <ILI9341_SetRotation+0x9c>)
 8000b46:	22f0      	movs	r2, #240	; 0xf0
 8000b48:	801a      	strh	r2, [r3, #0]
		break;
 8000b4a:	e016      	b.n	8000b7a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000b4c:	2088      	movs	r0, #136	; 0x88
 8000b4e:	f7ff fe17 	bl	8000780 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <ILI9341_SetRotation+0x98>)
 8000b54:	22f0      	movs	r2, #240	; 0xf0
 8000b56:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <ILI9341_SetRotation+0x9c>)
 8000b5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b5e:	801a      	strh	r2, [r3, #0]
		break;
 8000b60:	e00b      	b.n	8000b7a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000b62:	20e8      	movs	r0, #232	; 0xe8
 8000b64:	f7ff fe0c 	bl	8000780 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <ILI9341_SetRotation+0x98>)
 8000b6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b6e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <ILI9341_SetRotation+0x9c>)
 8000b72:	22f0      	movs	r2, #240	; 0xf0
 8000b74:	801a      	strh	r2, [r3, #0]
		break;
 8000b76:	e000      	b.n	8000b7a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000b78:	bf00      	nop
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000002 	.word	0x20000002
 8000b88:	20000000 	.word	0x20000000

08000b8c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	80fb      	strh	r3, [r7, #6]
 8000b98:	466b      	mov	r3, sp
 8000b9a:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ba8:	d202      	bcs.n	8000bb0 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
 8000bae:	e002      	b.n	8000bb6 <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000bb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2101      	movs	r1, #1
 8000bba:	483e      	ldr	r0, [pc, #248]	; (8000cb4 <ILI9341_DrawColorBurst+0x128>)
 8000bbc:	f001 fa94 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc6:	483b      	ldr	r0, [pc, #236]	; (8000cb4 <ILI9341_DrawColorBurst+0x128>)
 8000bc8:	f001 fa8e 	bl	80020e8 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000bd6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000bd8:	4623      	mov	r3, r4
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	4620      	mov	r0, r4
 8000be0:	f04f 0100 	mov.w	r1, #0
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	00cb      	lsls	r3, r1, #3
 8000bee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bf2:	00c2      	lsls	r2, r0, #3
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f04f 0100 	mov.w	r1, #0
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00cb      	lsls	r3, r1, #3
 8000c04:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c08:	00c2      	lsls	r2, r0, #3
 8000c0a:	1de3      	adds	r3, r4, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1e:	e00e      	b.n	8000c3e <ILI9341_DrawColorBurst+0xb2>
	{
		BurstBuffer[j] = chifted;
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c24:	4413      	add	r3, r2
 8000c26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c2a:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	3301      	adds	r3, #1
 8000c30:	88fa      	ldrh	r2, [r7, #6]
 8000c32:	b2d1      	uxtb	r1, r2
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3ec      	bcc.n	8000c20 <ILI9341_DrawColorBurst+0x94>
	}

	uint32_t SendingSize = size * 2;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c54:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c60:	fb01 f202 	mul.w	r2, r1, r2
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d010      	beq.n	8000c90 <ILI9341_DrawColorBurst+0x104>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c72:	e009      	b.n	8000c88 <ILI9341_DrawColorBurst+0xfc>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000c74:	69b9      	ldr	r1, [r7, #24]
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <ILI9341_DrawColorBurst+0x12c>)
 8000c7e:	f001 ff0b 	bl	8002a98 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c84:	3301      	adds	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3f1      	bcc.n	8000c74 <ILI9341_DrawColorBurst+0xe8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000c90:	69b9      	ldr	r1, [r7, #24]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	230a      	movs	r3, #10
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <ILI9341_DrawColorBurst+0x12c>)
 8000c9a:	f001 fefd 	bl	8002a98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <ILI9341_DrawColorBurst+0x128>)
 8000ca6:	f001 fa1f 	bl	80020e8 <HAL_GPIO_WritePin>
 8000caa:	46ad      	mov	sp, r5
}
 8000cac:	bf00      	nop
 8000cae:	3730      	adds	r7, #48	; 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb4:	40010c00 	.word	0x40010c00
 8000cb8:	20000270 	.word	0x20000270

08000cbc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <ILI9341_FillScreen+0x44>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <ILI9341_FillScreen+0x48>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff fd89 	bl	80007ec <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <ILI9341_FillScreen+0x44>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <ILI9341_FillScreen+0x48>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	fb03 f302 	mul.w	r3, r3, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff4a 	bl	8000b8c <ILI9341_DrawColorBurst>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000002 	.word	0x20000002
 8000d04:	20000000 	.word	0x20000000

08000d08 <ILI9341_DrawRectangle>:
	ILI9341_WriteCommand(0x2C);						//ADDRESS
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
}

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	4623      	mov	r3, r4
 8000d18:	80fb      	strh	r3, [r7, #6]
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80bb      	strh	r3, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	807b      	strh	r3, [r7, #2]
 8000d22:	4613      	mov	r3, r2
 8000d24:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <ILI9341_DrawRectangle+0xb0>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	88fa      	ldrh	r2, [r7, #6]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d23d      	bcs.n	8000dae <ILI9341_DrawRectangle+0xa6>
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <ILI9341_DrawRectangle+0xb4>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	88ba      	ldrh	r2, [r7, #4]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d237      	bcs.n	8000dae <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000d3e:	88fa      	ldrh	r2, [r7, #6]
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <ILI9341_DrawRectangle+0xb0>)
 8000d46:	8812      	ldrh	r2, [r2, #0]
 8000d48:	b292      	uxth	r2, r2
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	dd05      	ble.n	8000d5a <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <ILI9341_DrawRectangle+0xb0>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000d5a:	88ba      	ldrh	r2, [r7, #4]
 8000d5c:	883b      	ldrh	r3, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <ILI9341_DrawRectangle+0xb4>)
 8000d62:	8812      	ldrh	r2, [r2, #0]
 8000d64:	b292      	uxth	r2, r2
 8000d66:	4293      	cmp	r3, r2
 8000d68:	dd05      	ble.n	8000d76 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <ILI9341_DrawRectangle+0xb4>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	88bb      	ldrh	r3, [r7, #4]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b29c      	uxth	r4, r3
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	883b      	ldrh	r3, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	88b9      	ldrh	r1, [r7, #4]
 8000d90:	88f8      	ldrh	r0, [r7, #6]
 8000d92:	4622      	mov	r2, r4
 8000d94:	f7ff fd2a 	bl	80007ec <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000d98:	883b      	ldrh	r3, [r7, #0]
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	8b3b      	ldrh	r3, [r7, #24]
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fef0 	bl	8000b8c <ILI9341_DrawColorBurst>
 8000dac:	e000      	b.n	8000db0 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dae:	bf00      	nop
}
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000002 	.word	0x20000002
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <PixelArt_InitScreen>:
uint8_t delay = 115;

/**
 * @brief Initialize the screen for PixelArt.
 */
void PixelArt_InitScreen() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8000dc4:	f7ff fd88 	bl	80008d8 <ILI9341_Init>
	ILI9341_FillScreen(DGY);
 8000dc8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8000dcc:	f7ff ff76 	bl	8000cbc <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fe8b 	bl	8000aec <ILI9341_SetRotation>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <PixelArt_DrawCharacter>:
 * @param character The character to draw.
 * @param m_cellSize The size of each cell in the grid.
 * @param m_borderSpace The amount of border space to leave around each cell.
 * @param m_scalFactor The scale factor to adjust the cell size.
 */
void PixelArt_DrawCharacter(characterPixels8_8 character, uint8_t m_cellSize, uint8_t m_borderSpace, float m_scalFactor) {
 8000dda:	b084      	sub	sp, #16
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000de6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// if grid 0 || 1 ifndef ...

	// Define the size of each cell in the grid
	uint8_t cellSize = m_cellSize;
 8000dea:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8000dee:	75fb      	strb	r3, [r7, #23]

	uint8_t width = cellSize;
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	747b      	strb	r3, [r7, #17]
	uint8_t height = cellSize;
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	743b      	strb	r3, [r7, #16]

	// Scale the model according to a scale ratio
	if (m_scalFactor != 0)
 8000df8:	f04f 0100 	mov.w	r1, #0
 8000dfc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000e00:	f7ff fbaa 	bl	8000558 <__aeabi_fcmpeq>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10f      	bne.n	8000e2a <PixelArt_DrawCharacter+0x50>
		cellSize = (uint8_t)cellSize * m_scalFactor;
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fb0b 	bl	8000428 <__aeabi_i2f>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f997 	bl	800014c <__aeabi_fmul>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fbcb 	bl	80005bc <__aeabi_f2uiz>
 8000e26:	4603      	mov	r3, r0
 8000e28:	75fb      	strb	r3, [r7, #23]

	// Define the position of the grid on the display
	uint16_t startX = (ILI9341_SCREEN_HEIGHT - 8 * cellSize) / 2;
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	f1c3 031e 	rsb	r3, r3, #30
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	81fb      	strh	r3, [r7, #14]
	uint16_t startY = (ILI9341_SCREEN_WIDTH - 8 * cellSize) / 2;
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	81bb      	strh	r3, [r7, #12]

	// Draw the character
	for (uint16_t i = 0; i < 8; i++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	82bb      	strh	r3, [r7, #20]
 8000e46:	e045      	b.n	8000ed4 <PixelArt_DrawCharacter+0xfa>
		for (uint16_t j = 0; j < 8; j++) {
 8000e48:	2300      	movs	r3, #0
 8000e4a:	827b      	strh	r3, [r7, #18]
 8000e4c:	e039      	b.n	8000ec2 <PixelArt_DrawCharacter+0xe8>
			// Calculate the position and dimensions of each rectangle
			uint16_t x = startX + i * cellSize;
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	8aba      	ldrh	r2, [r7, #20]
 8000e54:	fb02 f303 	mul.w	r3, r2, r3
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	817b      	strh	r3, [r7, #10]
			uint16_t y = startY + j * cellSize;
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	8a7a      	ldrh	r2, [r7, #18]
 8000e66:	fb02 f303 	mul.w	r3, r2, r3
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	89bb      	ldrh	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	813b      	strh	r3, [r7, #8]

			// Fill each rectangle with the specified color
			uint16_t color = character.pixels[i][j];
 8000e72:	8aba      	ldrh	r2, [r7, #20]
 8000e74:	8a7b      	ldrh	r3, [r7, #18]
 8000e76:	00d2      	lsls	r2, r2, #3
 8000e78:	4413      	add	r3, r2
 8000e7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e82:	80fb      	strh	r3, [r7, #6]
			ILI9341_DrawFilledRectangleCoord(x, y, x + width - m_borderSpace, y + height - m_borderSpace, color);
 8000e84:	7c7b      	ldrb	r3, [r7, #17]
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	897b      	ldrh	r3, [r7, #10]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b29c      	uxth	r4, r3
 8000e98:	7c3b      	ldrb	r3, [r7, #16]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	893b      	ldrh	r3, [r7, #8]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	8939      	ldrh	r1, [r7, #8]
 8000eae:	8978      	ldrh	r0, [r7, #10]
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	f7ff fba0 	bl	80005fc <ILI9341_DrawFilledRectangleCoord>
		for (uint16_t j = 0; j < 8; j++) {
 8000ebc:	8a7b      	ldrh	r3, [r7, #18]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	827b      	strh	r3, [r7, #18]
 8000ec2:	8a7b      	ldrh	r3, [r7, #18]
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	d9c2      	bls.n	8000e4e <PixelArt_DrawCharacter+0x74>
		}
		HAL_Delay(100);
 8000ec8:	2064      	movs	r0, #100	; 0x64
 8000eca:	f000 fc69 	bl	80017a0 <HAL_Delay>
	for (uint16_t i = 0; i < 8; i++) {
 8000ece:	8abb      	ldrh	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	82bb      	strh	r3, [r7, #20]
 8000ed4:	8abb      	ldrh	r3, [r7, #20]
 8000ed6:	2b07      	cmp	r3, #7
 8000ed8:	d9b6      	bls.n	8000e48 <PixelArt_DrawCharacter+0x6e>
	}
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ee6:	b004      	add	sp, #16
 8000ee8:	4770      	bx	lr

08000eea <PixelArt_AnimeCharacter>:
 * @param character An array of characters to animate.
 * @param m_cellSize The size of each cell in the grid.
 * @param m_borderSpace The amount of border space to leave around each cell.
 * @param m_scalFactor The scale factor to adjust the cell size.
 */
void PixelArt_AnimeCharacter(characterPixels8_8 character[4], uint8_t m_cellSize, uint8_t m_borderSpace, float m_scalFactor) {
 8000eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eee:	b0a6      	sub	sp, #152	; 0x98
 8000ef0:	af20      	add	r7, sp, #128	; 0x80
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	72fb      	strb	r3, [r7, #11]
 8000efa:	4613      	mov	r3, r2
 8000efc:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < 4; ++i) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
 8000f02:	e025      	b.n	8000f50 <PixelArt_AnimeCharacter+0x66>
		PixelArt_DrawCharacter(character[i], m_cellSize, m_borderSpace, m_scalFactor);
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	01db      	lsls	r3, r3, #7
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	921e      	str	r2, [sp, #120]	; 0x78
 8000f10:	7aba      	ldrb	r2, [r7, #10]
 8000f12:	921d      	str	r2, [sp, #116]	; 0x74
 8000f14:	7afa      	ldrb	r2, [r7, #11]
 8000f16:	921c      	str	r2, [sp, #112]	; 0x70
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	f04f 0800 	mov.w	r8, #0
 8000f1e:	4690      	mov	r8, r2
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4616      	mov	r6, r2
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	2500      	movs	r5, #0
 8000f2a:	4615      	mov	r5, r2
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	2400      	movs	r4, #0
 8000f30:	4614      	mov	r4, r2
 8000f32:	4668      	mov	r0, sp
 8000f34:	3310      	adds	r3, #16
 8000f36:	2270      	movs	r2, #112	; 0x70
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f002 fee1 	bl	8003d00 <memcpy>
 8000f3e:	4640      	mov	r0, r8
 8000f40:	4631      	mov	r1, r6
 8000f42:	462a      	mov	r2, r5
 8000f44:	4623      	mov	r3, r4
 8000f46:	f7ff ff48 	bl	8000dda <PixelArt_DrawCharacter>
	for (uint8_t i = 0; i < 4; ++i) {
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	75fb      	strb	r3, [r7, #23]
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d9d6      	bls.n	8000f04 <PixelArt_AnimeCharacter+0x1a>
		// animation speed
	}
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f62 <SystemClock_Config>:
/**
 * @brief Configures the system clock.
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b090      	sub	sp, #64	; 0x40
 8000f66:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	2228      	movs	r2, #40	; 0x28
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fed3 	bl	8003d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f8c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 f8d6 	bl	800215c <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fb6:	f000 f9bb 	bl	8001330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fb41 	bl	800265c <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fe0:	f000 f9a6 	bl	8001330 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3740      	adds	r7, #64	; 0x40
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <MX_SPI1_Init>:
/**
  * @brief SPI init
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_SPI1_Init+0x64>)
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <MX_SPI1_Init+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_SPI1_Init+0x64>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_SPI1_Init+0x64>)
 8001020:	2208      	movs	r2, #8
 8001022:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_SPI1_Init+0x64>)
 8001038:	220a      	movs	r2, #10
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_SPI1_Init+0x64>)
 800103e:	f001 fca7 	bl	8002990 <HAL_SPI_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001048:	f000 f972 	bl	8001330 <Error_Handler>
  }

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000270 	.word	0x20000270
 8001054:	40013000 	.word	0x40013000

08001058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	4b38      	ldr	r3, [pc, #224]	; (8001150 <MX_GPIO_Init+0xf8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a37      	ldr	r2, [pc, #220]	; (8001150 <MX_GPIO_Init+0xf8>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b35      	ldr	r3, [pc, #212]	; (8001150 <MX_GPIO_Init+0xf8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <MX_GPIO_Init+0xf8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a31      	ldr	r2, [pc, #196]	; (8001150 <MX_GPIO_Init+0xf8>)
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <MX_GPIO_Init+0xf8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0320 	and.w	r3, r3, #32
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <MX_GPIO_Init+0xf8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <MX_GPIO_Init+0xf8>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <MX_GPIO_Init+0xf8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <MX_GPIO_Init+0xf8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a25      	ldr	r2, [pc, #148]	; (8001150 <MX_GPIO_Init+0xf8>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <MX_GPIO_Init+0xf8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2120      	movs	r1, #32
 80010d0:	4820      	ldr	r0, [pc, #128]	; (8001154 <MX_GPIO_Init+0xfc>)
 80010d2:	f001 f809 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f240 4103 	movw	r1, #1027	; 0x403
 80010dc:	481e      	ldr	r0, [pc, #120]	; (8001158 <MX_GPIO_Init+0x100>)
 80010de:	f001 f803 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_GPIO_Init+0x104>)
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	481a      	ldr	r0, [pc, #104]	; (8001160 <MX_GPIO_Init+0x108>)
 80010f8:	f000 fe72 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010fc:	2320      	movs	r3, #32
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2302      	movs	r3, #2
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	4810      	ldr	r0, [pc, #64]	; (8001154 <MX_GPIO_Init+0xfc>)
 8001114:	f000 fe64 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001118:	f240 4303 	movw	r3, #1027	; 0x403
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <MX_GPIO_Init+0x100>)
 8001132:	f000 fe55 	bl	8001de0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f000 fc2b 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001140:	2028      	movs	r0, #40	; 0x28
 8001142:	f000 fc44 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	10110000 	.word	0x10110000
 8001160:	40011000 	.word	0x40011000

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800119c:	f002 fcb0 	bl	8003b00 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f8c3 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000310 	.word	0x20000310
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_DMA_Init+0x48>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <MX_DMA_Init+0x48>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_DMA_Init+0x48>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	200d      	movs	r0, #13
 80011dc:	f000 fbdb 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011e0:	200d      	movs	r0, #13
 80011e2:	f000 fbf4 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 fbd3 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011f0:	200f      	movs	r0, #15
 80011f2:	f000 fbec 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_TIM2_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_TIM2_Init+0xe4>)
 800124a:	2259      	movs	r2, #89	; 0x59
 800124c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125a:	4823      	ldr	r0, [pc, #140]	; (80012e8 <MX_TIM2_Init+0xe4>)
 800125c:	f001 ff48 	bl	80030f0 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001266:	f000 f863 	bl	8001330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001274:	4619      	mov	r1, r3
 8001276:	481c      	ldr	r0, [pc, #112]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001278:	f002 f8a0 	bl	80033bc <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001282:	f000 f855 	bl	8001330 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001288:	f001 ff81 	bl	800318e <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001292:	f000 f84d 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_TIM2_Init+0xe4>)
 80012a6:	f002 fbcd 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f000 f83e 	bl	8001330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	; 0x60
 80012b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM2_Init+0xe4>)
 80012cc:	f001 ffb8 	bl	8003240 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80012d6:	f000 f82b 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM2_Init+0xe4>)
 80012dc:	f000 f920 	bl	8001520 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3738      	adds	r7, #56	; 0x38
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200002c8 	.word	0x200002c8

080012ec <Init_All>:

/**
 * @brief Initializes all the peripherals.
 * @retval None
 */
void Init_All(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	  HAL_Init();
 80012f0:	f000 f9f4 	bl	80016dc <HAL_Init>
	  SystemClock_Config();
 80012f4:	f7ff fe35 	bl	8000f62 <SystemClock_Config>

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 80012f8:	f7ff feae 	bl	8001058 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 80012fc:	f7ff ff32 	bl	8001164 <MX_USART2_UART_Init>
	  MX_DMA_Init();
 8001300:	f7ff ff5a 	bl	80011b8 <MX_DMA_Init>
	  MX_TIM2_Init();
 8001304:	f7ff ff7e 	bl	8001204 <MX_TIM2_Init>
	  MX_SPI1_Init();
 8001308:	f7ff fe70 	bl	8000fec <MX_SPI1_Init>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <main>:
#include "Pixils.h"
#include "PixelArt.h"

// Main Function
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	Init_All();
 8001314:	f7ff ffea 	bl	80012ec <Init_All>
	PixelArt_InitScreen();
 8001318:	f7ff fd52 	bl	8000dc0 <PixelArt_InitScreen>

	while(1) {
		//Effect_Rainbow();
		PixelArt_AnimeCharacter(Wizard, 24, 1, 0);
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	2201      	movs	r2, #1
 8001322:	2118      	movs	r1, #24
 8001324:	4801      	ldr	r0, [pc, #4]	; (800132c <main+0x1c>)
 8001326:	f7ff fde0 	bl	8000eea <PixelArt_AnimeCharacter>
 800132a:	e7f7      	b.n	800131c <main+0xc>
 800132c:	20000004 	.word	0x20000004

08001330 <Error_Handler>:

	}
}

void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>
	...

0800133c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_MspInit+0x5c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_MspInit+0x5c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_MspInit+0x5c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_MspInit+0x5c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_MspInit+0x5c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_MspInit+0x5c>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_MspInit+0x60>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_MspInit+0x60>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000

080013a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <HAL_SPI_MspInit+0xd8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d157      	bne.n	8001470 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_SPI_MspInit+0xdc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a2d      	ldr	r2, [pc, #180]	; (800147c <HAL_SPI_MspInit+0xdc>)
 80013c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_SPI_MspInit+0xdc>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_SPI_MspInit+0xdc>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_SPI_MspInit+0xdc>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_SPI_MspInit+0xdc>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80013f0:	2328      	movs	r3, #40	; 0x28
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	481f      	ldr	r0, [pc, #124]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 8001404:	f000 fcec 	bl	8001de0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_SPI_MspInit+0xe4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_SPI_MspInit+0xe4>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_SPI_MspInit+0xec>)
 8001428:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 800142c:	2210      	movs	r2, #16
 800142e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 8001456:	f000 fad5 	bl	8001a04 <HAL_DMA_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001460:	f7ff ff66 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 8001468:	649a      	str	r2, [r3, #72]	; 0x48
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013000 	.word	0x40013000
 800147c:	40021000 	.word	0x40021000
 8001480:	40010c00 	.word	0x40010c00
 8001484:	40010000 	.word	0x40010000
 8001488:	20000354 	.word	0x20000354
 800148c:	40020030 	.word	0x40020030

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a0:	d133      	bne.n	800150a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_TIM_Base_MspInit+0x84>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <HAL_TIM_Base_MspInit+0x84>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_TIM_Base_MspInit+0x84>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014bc:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_TIM_Base_MspInit+0x8c>)
 80014be:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014c2:	2210      	movs	r2, #16
 80014c4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80014ee:	480a      	ldr	r0, [pc, #40]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 80014f0:	f000 fa88 	bl	8001a04 <HAL_DMA_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80014fa:	f7ff ff19 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a05      	ldr	r2, [pc, #20]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_TIM_Base_MspInit+0x88>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	2000022c 	.word	0x2000022c
 800151c:	40020058 	.word	0x40020058

08001520 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153e:	d117      	bne.n	8001570 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_TIM_MspPostInit+0x58>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_TIM_MspPostInit+0x58>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_TIM_MspPostInit+0x58>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001558:	2301      	movs	r3, #1
 800155a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2302      	movs	r3, #2
 8001562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	4804      	ldr	r0, [pc, #16]	; (800157c <HAL_TIM_MspPostInit+0x5c>)
 800156c:	f000 fc38 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	40010800 	.word	0x40010800

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x70>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d123      	bne.n	80015e8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_UART_MspInit+0x74>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <HAL_UART_MspInit+0x74>)
 80015a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015aa:	61d3      	str	r3, [r2, #28]
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_UART_MspInit+0x74>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_UART_MspInit+0x74>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HAL_UART_MspInit+0x74>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_UART_MspInit+0x74>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015d0:	230c      	movs	r3, #12
 80015d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2302      	movs	r3, #2
 80015da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_UART_MspInit+0x78>)
 80015e4:	f000 fbfc 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40004400 	.word	0x40004400
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010800 	.word	0x40010800

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001642:	f000 f891 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA1_Channel3_IRQHandler+0x10>)
 8001652:	f000 fa91 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000354 	.word	0x20000354

08001660 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA1_Channel5_IRQHandler+0x10>)
 8001666:	f000 fa87 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000022c 	.word	0x2000022c

08001674 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800167c:	f000 fd4c 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	; (80016c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	; (80016d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016b6:	f7ff ffe5 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f002 fafd 	bl	8003cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016be:	f7ff fe27 	bl	8001310 <main>
  bx lr
 80016c2:	4770      	bx	lr
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80016cc:	08003d74 	.word	0x08003d74
  ldr r2, =_sbss
 80016d0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80016d4:	2000039c 	.word	0x2000039c

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_Init+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_Init+0x28>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f947 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff fe20 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f95f 	bl	80019ea <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f927 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000204 	.word	0x20000204
 8001760:	2000020c 	.word	0x2000020c
 8001764:	20000208 	.word	0x20000208

08001768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_IncTick+0x1c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_IncTick+0x20>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <HAL_IncTick+0x20>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	2000020c 	.word	0x2000020c
 8001788:	20000398 	.word	0x20000398

0800178c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_GetTick+0x10>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000398 	.word	0x20000398

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff fff0 	bl	800178c <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffe0 	bl	800178c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000020c 	.word	0x2000020c

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4906      	ldr	r1, [pc, #24]	; (8001880 <__NVIC_EnableIRQ+0x34>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff90 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff2d 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff42 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff35 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e043      	b.n	8001aa2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_DMA_Init+0xa8>)
 8001a22:	4413      	add	r3, r2
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_DMA_Init+0xac>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	009a      	lsls	r2, r3, #2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_DMA_Init+0xb0>)
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	bffdfff8 	.word	0xbffdfff8
 8001ab0:	cccccccd 	.word	0xcccccccd
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Start_IT+0x20>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e04a      	b.n	8001b6e <HAL_DMA_Start_IT+0xb6>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d13a      	bne.n	8001b60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f938 	bl	8001d84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 020e 	orr.w	r2, r2, #14
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e00f      	b.n	8001b4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0204 	bic.w	r2, r2, #4
 8001b3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 020a 	orr.w	r2, r2, #10
 8001b4c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e005      	b.n	8001b6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2204      	movs	r2, #4
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d04f      	beq.n	8001c40 <HAL_DMA_IRQHandler+0xc8>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d04a      	beq.n	8001c40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0204 	bic.w	r2, r2, #4
 8001bc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_DMA_IRQHandler+0x1f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d029      	beq.n	8001c26 <HAL_DMA_IRQHandler+0xae>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <HAL_DMA_IRQHandler+0x1f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d022      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xaa>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a63      	ldr	r2, [pc, #396]	; (8001d70 <HAL_DMA_IRQHandler+0x1f8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0xa4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a62      	ldr	r2, [pc, #392]	; (8001d74 <HAL_DMA_IRQHandler+0x1fc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d012      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x9e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_DMA_IRQHandler+0x200>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x98>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_DMA_IRQHandler+0x204>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d102      	bne.n	8001c0a <HAL_DMA_IRQHandler+0x92>
 8001c04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c08:	e00e      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c0e:	e00b      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c14:	e008      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c1a:	e005      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c20:	e002      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	e000      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c26:	2304      	movs	r3, #4
 8001c28:	4a55      	ldr	r2, [pc, #340]	; (8001d80 <HAL_DMA_IRQHandler+0x208>)
 8001c2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8094 	beq.w	8001d5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c3e:	e08e      	b.n	8001d5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	2202      	movs	r2, #2
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d056      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x186>
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d051      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10b      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 020a 	bic.w	r2, r2, #10
 8001c76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_DMA_IRQHandler+0x1f0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d029      	beq.n	8001cde <HAL_DMA_IRQHandler+0x166>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <HAL_DMA_IRQHandler+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <HAL_DMA_IRQHandler+0x162>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <HAL_DMA_IRQHandler+0x1f8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01a      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x15c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a34      	ldr	r2, [pc, #208]	; (8001d74 <HAL_DMA_IRQHandler+0x1fc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d012      	beq.n	8001cce <HAL_DMA_IRQHandler+0x156>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <HAL_DMA_IRQHandler+0x200>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00a      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x150>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <HAL_DMA_IRQHandler+0x204>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <HAL_DMA_IRQHandler+0x14a>
 8001cbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cc0:	e00e      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc6:	e00b      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ccc:	e008      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd2:	e005      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	e002      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e000      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <HAL_DMA_IRQHandler+0x208>)
 8001ce2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d034      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cfc:	e02f      	b.n	8001d5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	2208      	movs	r2, #8
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d028      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x1e8>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 020e 	bic.w	r2, r2, #14
 8001d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f202 	lsl.w	r2, r1, r2
 8001d36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
    }
  }
  return;
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
}
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40020008 	.word	0x40020008
 8001d6c:	4002001c 	.word	0x4002001c
 8001d70:	40020030 	.word	0x40020030
 8001d74:	40020044 	.word	0x40020044
 8001d78:	40020058 	.word	0x40020058
 8001d7c:	4002006c 	.word	0x4002006c
 8001d80:	40020000 	.word	0x40020000

08001d84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d108      	bne.n	8001dc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dc2:	e007      	b.n	8001dd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b08b      	sub	sp, #44	; 0x2c
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e169      	b.n	80020c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df4:	2201      	movs	r2, #1
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 8158 	bne.w	80020c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a9a      	ldr	r2, [pc, #616]	; (8002080 <HAL_GPIO_Init+0x2a0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d05e      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e1c:	4a98      	ldr	r2, [pc, #608]	; (8002080 <HAL_GPIO_Init+0x2a0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d875      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e22:	4a98      	ldr	r2, [pc, #608]	; (8002084 <HAL_GPIO_Init+0x2a4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d058      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e28:	4a96      	ldr	r2, [pc, #600]	; (8002084 <HAL_GPIO_Init+0x2a4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d86f      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e2e:	4a96      	ldr	r2, [pc, #600]	; (8002088 <HAL_GPIO_Init+0x2a8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d052      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e34:	4a94      	ldr	r2, [pc, #592]	; (8002088 <HAL_GPIO_Init+0x2a8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d869      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e3a:	4a94      	ldr	r2, [pc, #592]	; (800208c <HAL_GPIO_Init+0x2ac>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04c      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e40:	4a92      	ldr	r2, [pc, #584]	; (800208c <HAL_GPIO_Init+0x2ac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d863      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e46:	4a92      	ldr	r2, [pc, #584]	; (8002090 <HAL_GPIO_Init+0x2b0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d046      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e4c:	4a90      	ldr	r2, [pc, #576]	; (8002090 <HAL_GPIO_Init+0x2b0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d85d      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d82a      	bhi.n	8001eac <HAL_GPIO_Init+0xcc>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d859      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e5a:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <HAL_GPIO_Init+0x80>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001edb 	.word	0x08001edb
 8001e64:	08001eb5 	.word	0x08001eb5
 8001e68:	08001ec7 	.word	0x08001ec7
 8001e6c:	08001f09 	.word	0x08001f09
 8001e70:	08001f0f 	.word	0x08001f0f
 8001e74:	08001f0f 	.word	0x08001f0f
 8001e78:	08001f0f 	.word	0x08001f0f
 8001e7c:	08001f0f 	.word	0x08001f0f
 8001e80:	08001f0f 	.word	0x08001f0f
 8001e84:	08001f0f 	.word	0x08001f0f
 8001e88:	08001f0f 	.word	0x08001f0f
 8001e8c:	08001f0f 	.word	0x08001f0f
 8001e90:	08001f0f 	.word	0x08001f0f
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001f0f 	.word	0x08001f0f
 8001e9c:	08001f0f 	.word	0x08001f0f
 8001ea0:	08001f0f 	.word	0x08001f0f
 8001ea4:	08001ebd 	.word	0x08001ebd
 8001ea8:	08001ed1 	.word	0x08001ed1
 8001eac:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_GPIO_Init+0x2b4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb2:	e02c      	b.n	8001f0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e029      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e024      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	3308      	adds	r3, #8
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e01f      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e01a      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e013      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	611a      	str	r2, [r3, #16]
          break;
 8001efa:	e009      	b.n	8001f10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001efc:	2308      	movs	r3, #8
 8001efe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	615a      	str	r2, [r3, #20]
          break;
 8001f06:	e003      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          break;
 8001f0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	; 0xff
 8001f14:	d801      	bhi.n	8001f1a <HAL_GPIO_Init+0x13a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	e001      	b.n	8001f1e <HAL_GPIO_Init+0x13e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d802      	bhi.n	8001f2c <HAL_GPIO_Init+0x14c>
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x152>
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3b08      	subs	r3, #8
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	210f      	movs	r1, #15
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	401a      	ands	r2, r3
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80b1 	beq.w	80020c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f60:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <HAL_GPIO_Init+0x2bc>)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_GPIO_Init+0x2c0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1ec>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_GPIO_Init+0x2c4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3e      	ldr	r2, [pc, #248]	; (80020a8 <HAL_GPIO_Init+0x2c8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3d      	ldr	r2, [pc, #244]	; (80020ac <HAL_GPIO_Init+0x2cc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1e0>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e006      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	e004      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fde:	492f      	ldr	r1, [pc, #188]	; (800209c <HAL_GPIO_Init+0x2bc>)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	492c      	ldr	r1, [pc, #176]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4928      	ldr	r1, [pc, #160]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002010:	4013      	ands	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4922      	ldr	r1, [pc, #136]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	491e      	ldr	r1, [pc, #120]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002038:	4013      	ands	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	4918      	ldr	r1, [pc, #96]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	4914      	ldr	r1, [pc, #80]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002060:	4013      	ands	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d021      	beq.n	80020b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
 800207c:	e021      	b.n	80020c2 <HAL_GPIO_Init+0x2e2>
 800207e:	bf00      	nop
 8002080:	10320000 	.word	0x10320000
 8002084:	10310000 	.word	0x10310000
 8002088:	10220000 	.word	0x10220000
 800208c:	10210000 	.word	0x10210000
 8002090:	10120000 	.word	0x10120000
 8002094:	10110000 	.word	0x10110000
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010800 	.word	0x40010800
 80020a4:	40010c00 	.word	0x40010c00
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40011400 	.word	0x40011400
 80020b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	4909      	ldr	r1, [pc, #36]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020be:	4013      	ands	r3, r2
 80020c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	3301      	adds	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f ae8e 	bne.w	8001df4 <HAL_GPIO_Init+0x14>
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	372c      	adds	r7, #44	; 0x2c
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f8:	787b      	ldrb	r3, [r7, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002104:	e003      	b.n	800210e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	041a      	lsls	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f806 	bl	8002148 <HAL_GPIO_EXTI_Callback>
  }
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e26c      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8087 	beq.w	800228a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800217c:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b04      	cmp	r3, #4
 8002186:	d00c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002188:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d112      	bne.n	80021ba <HAL_RCC_OscConfig+0x5e>
 8002194:	4b8c      	ldr	r3, [pc, #560]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d10b      	bne.n	80021ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a2:	4b89      	ldr	r3, [pc, #548]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d06c      	beq.n	8002288 <HAL_RCC_OscConfig+0x12c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d168      	bne.n	8002288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e246      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x76>
 80021c4:	4b80      	ldr	r3, [pc, #512]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a7f      	ldr	r2, [pc, #508]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	e02e      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x98>
 80021da:	4b7b      	ldr	r3, [pc, #492]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7a      	ldr	r2, [pc, #488]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b78      	ldr	r3, [pc, #480]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a77      	ldr	r2, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0xbc>
 80021fe:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a71      	ldr	r2, [pc, #452]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6e      	ldr	r2, [pc, #440]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 8002218:	4b6b      	ldr	r3, [pc, #428]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6a      	ldr	r2, [pc, #424]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a67      	ldr	r2, [pc, #412]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff faa8 	bl	800178c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff faa4 	bl	800178c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1fa      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0xe4>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fa94 	bl	800178c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fa90 	bl	800178c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1e6      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x10c>
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002296:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022a2:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x18c>
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1ba      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4939      	ldr	r1, [pc, #228]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b36      	ldr	r3, [pc, #216]	; (80023cc <HAL_RCC_OscConfig+0x270>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fa49 	bl	800178c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fe:	f7ff fa45 	bl	800178c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e19b      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4927      	ldr	r1, [pc, #156]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x270>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fa28 	bl	800178c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002340:	f7ff fa24 	bl	800178c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e17a      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03a      	beq.n	80023e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d019      	beq.n	80023a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff fa08 	bl	800178c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff fa04 	bl	800178c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e15a      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800239e:	2001      	movs	r0, #1
 80023a0:	f000 fad8 	bl	8002954 <RCC_Delay>
 80023a4:	e01c      	b.n	80023e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff f9ee 	bl	800178c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b2:	e00f      	b.n	80023d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff f9ea 	bl	800178c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d908      	bls.n	80023d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e140      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	42420000 	.word	0x42420000
 80023d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b9e      	ldr	r3, [pc, #632]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e9      	bne.n	80023b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a6 	beq.w	800253a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b97      	ldr	r3, [pc, #604]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b94      	ldr	r3, [pc, #592]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a93      	ldr	r2, [pc, #588]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b8e      	ldr	r3, [pc, #568]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a8a      	ldr	r2, [pc, #552]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff f9ab 	bl	800178c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff f9a7 	bl	800178c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0fd      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x312>
 8002460:	4b7b      	ldr	r3, [pc, #492]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a7a      	ldr	r2, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	e02d      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x334>
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6213      	str	r3, [r2, #32]
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a72      	ldr	r2, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	e01c      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x356>
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a6c      	ldr	r2, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	e00b      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a66      	ldr	r2, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	4b64      	ldr	r3, [pc, #400]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a63      	ldr	r2, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7ff f95b 	bl	800178c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff f957 	bl	800178c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0ab      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ee      	beq.n	80024da <HAL_RCC_OscConfig+0x37e>
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7ff f945 	bl	800178c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7ff f941 	bl	800178c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e095      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b48      	ldr	r3, [pc, #288]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a47      	ldr	r2, [pc, #284]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8081 	beq.w	8002646 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002544:	4b42      	ldr	r3, [pc, #264]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d061      	beq.n	8002614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d146      	bne.n	80025e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff f915 	bl	800178c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff f911 	bl	800178c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e067      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d108      	bne.n	80025a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	492d      	ldr	r1, [pc, #180]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a19      	ldr	r1, [r3, #32]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	430b      	orrs	r3, r1
 80025b2:	4927      	ldr	r1, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff f8e5 	bl	800178c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff f8e1 	bl	800178c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e037      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x46a>
 80025e4:	e02f      	b.n	8002646 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff f8ce 	bl	800178c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff f8ca 	bl	800178c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e020      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x498>
 8002612:	e018      	b.n	8002646 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e013      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	42420060 	.word	0x42420060

0800265c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0d0      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d910      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4965      	ldr	r1, [pc, #404]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d040      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e073      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06b      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4936      	ldr	r1, [pc, #216]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7ff f81e 	bl	800178c <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff f81a 	bl	800178c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e053      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d210      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4922      	ldr	r1, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1cc>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1d0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe ff7c 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40022000 	.word	0x40022000
 8002820:	40021000 	.word	0x40021000
 8002824:	08003d54 	.word	0x08003d54
 8002828:	20000204 	.word	0x20000204
 800282c:	20000208 	.word	0x20000208

08002830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b490      	push	{r4, r7}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002838:	1d3c      	adds	r4, r7, #4
 800283a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002840:	f240 2301 	movw	r3, #513	; 0x201
 8002844:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b04      	cmp	r3, #4
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x40>
 800286a:	2b08      	cmp	r3, #8
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x46>
 800286e:	e02d      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	e02d      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	0c9b      	lsrs	r3, r3, #18
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002882:	4413      	add	r3, r2
 8002884:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002888:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c5b      	lsrs	r3, r3, #17
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028a2:	4413      	add	r3, r2
 80028a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ae:	fb02 f203 	mul.w	r2, r2, r3
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	e004      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	623b      	str	r3, [r7, #32]
      break;
 80028ca:	e002      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	623b      	str	r3, [r7, #32]
      break;
 80028d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d2:	6a3b      	ldr	r3, [r7, #32]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc90      	pop	{r4, r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	08003d44 	.word	0x08003d44
 80028e4:	40021000 	.word	0x40021000
 80028e8:	007a1200 	.word	0x007a1200
 80028ec:	003d0900 	.word	0x003d0900

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b02      	ldr	r3, [pc, #8]	; (8002900 <HAL_RCC_GetHCLKFreq+0x10>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	20000204 	.word	0x20000204

08002904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002908:	f7ff fff2 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	08003d64 	.word	0x08003d64

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002930:	f7ff ffde 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0adb      	lsrs	r3, r3, #11
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	08003d64 	.word	0x08003d64

08002954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <RCC_Delay+0x34>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <RCC_Delay+0x38>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a5b      	lsrs	r3, r3, #9
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002970:	bf00      	nop
  }
  while (Delay --);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f9      	bne.n	8002970 <RCC_Delay+0x1c>
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	20000204 	.word	0x20000204
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e076      	b.n	8002a90 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b2:	d009      	beq.n	80029c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
 80029ba:	e005      	b.n	80029c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fcdc 	bl	80013a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	ea42 0103 	orr.w	r1, r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	0c1a      	lsrs	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f002 0204 	and.w	r2, r2, #4
 8002a6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_SPI_Transmit+0x22>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e126      	b.n	8002d08 <HAL_SPI_Transmit+0x270>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac2:	f7fe fe63 	bl	800178c <HAL_GetTick>
 8002ac6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002adc:	e10b      	b.n	8002cf6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_SPI_Transmit+0x52>
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aee:	e102      	b.n	8002cf6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2203      	movs	r2, #3
 8002af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	88fa      	ldrh	r2, [r7, #6]
 8002b08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b36:	d10f      	bne.n	8002b58 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d007      	beq.n	8002b76 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b7e:	d14b      	bne.n	8002c18 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_SPI_Transmit+0xf6>
 8002b88:	8afb      	ldrh	r3, [r7, #22]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d13e      	bne.n	8002c0c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	881a      	ldrh	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bb2:	e02b      	b.n	8002c0c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d112      	bne.n	8002be8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	881a      	ldrh	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	1c9a      	adds	r2, r3, #2
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002be6:	e011      	b.n	8002c0c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be8:	f7fe fdd0 	bl	800178c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d803      	bhi.n	8002c00 <HAL_SPI_Transmit+0x168>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfe:	d102      	bne.n	8002c06 <HAL_SPI_Transmit+0x16e>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c0a:	e074      	b.n	8002cf6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ce      	bne.n	8002bb4 <HAL_SPI_Transmit+0x11c>
 8002c16:	e04c      	b.n	8002cb2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_SPI_Transmit+0x18e>
 8002c20:	8afb      	ldrh	r3, [r7, #22]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d140      	bne.n	8002ca8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	330c      	adds	r3, #12
 8002c30:	7812      	ldrb	r2, [r2, #0]
 8002c32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c4c:	e02c      	b.n	8002ca8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d113      	bne.n	8002c84 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	330c      	adds	r3, #12
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c82:	e011      	b.n	8002ca8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c84:	f7fe fd82 	bl	800178c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d803      	bhi.n	8002c9c <HAL_SPI_Transmit+0x204>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d102      	bne.n	8002ca2 <HAL_SPI_Transmit+0x20a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d102      	bne.n	8002ca8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ca6:	e026      	b.n	8002cf6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1cd      	bne.n	8002c4e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f9fc 	bl	80030b4 <SPI_EndRxTxTransaction>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	e000      	b.n	8002cf6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002cf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3720      	adds	r7, #32
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_SPI_Transmit_DMA+0x20>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e09b      	b.n	8002e68 <HAL_SPI_Transmit_DMA+0x158>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d002      	beq.n	8002d4a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
 8002d46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d48:	e089      	b.n	8002e5e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_Transmit_DMA+0x46>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d102      	bne.n	8002d5c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d5a:	e080      	b.n	8002e5e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	88fa      	ldrh	r2, [r7, #6]
 8002d7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da2:	d10f      	bne.n	8002dc4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_SPI_Transmit_DMA+0x160>)
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_SPI_Transmit_DMA+0x164>)
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd8:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <HAL_SPI_Transmit_DMA+0x168>)
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	2200      	movs	r2, #0
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4619      	mov	r1, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002dfc:	f7fe fe5c 	bl	8001ab8 <HAL_DMA_Start_IT>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002e1e:	e01e      	b.n	8002e5e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d007      	beq.n	8002e3e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0220 	orr.w	r2, r2, #32
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0202 	orr.w	r2, r2, #2
 8002e5c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	08002f47 	.word	0x08002f47
 8002e74:	08002ea1 	.word	0x08002ea1
 8002e78:	08002f63 	.word	0x08002f63

08002e7c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eae:	f7fe fc6d 	bl	800178c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d03b      	beq.n	8002f3a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0220 	bic.w	r2, r2, #32
 8002ed0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0202 	bic.w	r2, r2, #2
 8002ee0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	2164      	movs	r1, #100	; 0x64
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f000 f8e4 	bl	80030b4 <SPI_EndRxTxTransaction>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ffab 	bl	8002e8e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f38:	e002      	b.n	8002f40 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f7fd fbbc 	bl	80006b8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff ff91 	bl	8002e7c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0203 	bic.w	r2, r2, #3
 8002f7e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0210 	orr.w	r2, r3, #16
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff ff7a 	bl	8002e8e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fb4:	f7fe fbea 	bl	800178c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fc4:	f7fe fbe2 	bl	800178c <HAL_GetTick>
 8002fc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fca:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	015b      	lsls	r3, r3, #5
 8002fd0:	0d1b      	lsrs	r3, r3, #20
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fda:	e054      	b.n	8003086 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d050      	beq.n	8003086 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fe4:	f7fe fbd2 	bl	800178c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d902      	bls.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d13d      	bne.n	8003076 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003012:	d111      	bne.n	8003038 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301c:	d004      	beq.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d107      	bne.n	8003038 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003036:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003040:	d10f      	bne.n	8003062 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003060:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e017      	b.n	80030a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3b01      	subs	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d19b      	bne.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000204 	.word	0x20000204

080030b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff ff6a 	bl	8002fa4 <SPI_WaitFlagStateUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e000      	b.n	80030e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e041      	b.n	8003186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe f9ba 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 fa08 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e041      	b.n	8003224 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f839 	bl	800322c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f000 f9b9 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
	...

08003240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003256:	2302      	movs	r3, #2
 8003258:	e0ac      	b.n	80033b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b0c      	cmp	r3, #12
 8003266:	f200 809f 	bhi.w	80033a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800326a:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080033a9 	.word	0x080033a9
 8003278:	080033a9 	.word	0x080033a9
 800327c:	080033a9 	.word	0x080033a9
 8003280:	080032e5 	.word	0x080032e5
 8003284:	080033a9 	.word	0x080033a9
 8003288:	080033a9 	.word	0x080033a9
 800328c:	080033a9 	.word	0x080033a9
 8003290:	08003327 	.word	0x08003327
 8003294:	080033a9 	.word	0x080033a9
 8003298:	080033a9 	.word	0x080033a9
 800329c:	080033a9 	.word	0x080033a9
 80032a0:	08003367 	.word	0x08003367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f9ac 	bl	8003608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6999      	ldr	r1, [r3, #24]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	619a      	str	r2, [r3, #24]
      break;
 80032e2:	e062      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f9f2 	bl	80036d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
      break;
 8003324:	e041      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fa3b 	bl	80037a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0208 	orr.w	r2, r2, #8
 8003340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0204 	bic.w	r2, r2, #4
 8003350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69d9      	ldr	r1, [r3, #28]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	61da      	str	r2, [r3, #28]
      break;
 8003364:	e021      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fa85 	bl	800387c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69d9      	ldr	r1, [r3, #28]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	021a      	lsls	r2, r3, #8
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	61da      	str	r2, [r3, #28]
      break;
 80033a6:	e000      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80033a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_ConfigClockSource+0x18>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0b3      	b.n	800353c <HAL_TIM_ConfigClockSource+0x180>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340c:	d03e      	beq.n	800348c <HAL_TIM_ConfigClockSource+0xd0>
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	f200 8087 	bhi.w	8003524 <HAL_TIM_ConfigClockSource+0x168>
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341a:	f000 8085 	beq.w	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003422:	d87f      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x168>
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d01a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xa2>
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d87b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x168>
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d050      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x116>
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d877      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x168>
 8003434:	2b50      	cmp	r3, #80	; 0x50
 8003436:	d03c      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xf6>
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d873      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x168>
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d058      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x136>
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d86f      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x168>
 8003444:	2b30      	cmp	r3, #48	; 0x30
 8003446:	d064      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x156>
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d86b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x168>
 800344c:	2b20      	cmp	r3, #32
 800344e:	d060      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x156>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d867      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x168>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05c      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x156>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d05a      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800345c:	e062      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6899      	ldr	r1, [r3, #8]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f000 faca 	bl	8003a06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003480:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	609a      	str	r2, [r3, #8]
      break;
 800348a:	e04e      	b.n	800352a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f000 fab3 	bl	8003a06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ae:	609a      	str	r2, [r3, #8]
      break;
 80034b0:	e03b      	b.n	800352a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 fa2a 	bl	8003918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2150      	movs	r1, #80	; 0x50
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fa81 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 80034d0:	e02b      	b.n	800352a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	461a      	mov	r2, r3
 80034e0:	f000 fa48 	bl	8003974 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2160      	movs	r1, #96	; 0x60
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fa71 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 80034f0:	e01b      	b.n	800352a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	461a      	mov	r2, r3
 8003500:	f000 fa0a 	bl	8003918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2140      	movs	r1, #64	; 0x40
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fa61 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 8003510:	e00b      	b.n	800352a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f000 fa58 	bl	80039d2 <TIM_ITRx_SetConfig>
        break;
 8003522:	e002      	b.n	800352a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003524:	bf00      	nop
 8003526:	e000      	b.n	800352a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003528:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00b      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d007      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a26      	ldr	r2, [pc, #152]	; (8003600 <TIM_Base_SetConfig+0xbc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a25      	ldr	r2, [pc, #148]	; (8003604 <TIM_Base_SetConfig+0xc0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d007      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <TIM_Base_SetConfig+0xbc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a18      	ldr	r2, [pc, #96]	; (8003604 <TIM_Base_SetConfig+0xc0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d103      	bne.n	80035ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	615a      	str	r2, [r3, #20]
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800

08003608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f023 0201 	bic.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 0302 	bic.w	r3, r3, #2
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <TIM_OC1_SetConfig+0xc8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10c      	bne.n	800367e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0308 	bic.w	r3, r3, #8
 800366a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <TIM_OC1_SetConfig+0xc8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	621a      	str	r2, [r3, #32]
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00

080036d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0210 	bic.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0320 	bic.w	r3, r3, #32
 800371e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <TIM_OC2_SetConfig+0xd0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10d      	bne.n	8003750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800374e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <TIM_OC2_SetConfig+0xd0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d113      	bne.n	8003780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40012c00 	.word	0x40012c00

080037a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <TIM_OC3_SetConfig+0xd0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10d      	bne.n	8003822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800380c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <TIM_OC3_SetConfig+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d113      	bne.n	8003852 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40012c00 	.word	0x40012c00

0800387c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	031b      	lsls	r3, r3, #12
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <TIM_OC4_SetConfig+0x98>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d109      	bne.n	80038f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00

08003918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 030a 	bic.w	r3, r3, #10
 8003954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f023 0210 	bic.w	r2, r3, #16
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800399e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	031b      	lsls	r3, r3, #12
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f043 0307 	orr.w	r3, r3, #7
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	021a      	lsls	r2, r3, #8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	609a      	str	r2, [r3, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e046      	b.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d009      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a10      	ldr	r2, [pc, #64]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10c      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800

08003b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e03f      	b.n	8003b92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fd2a 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	; 0x24
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f829 	bl	8003b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bd6:	f023 030c 	bic.w	r3, r3, #12
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <UART_SetConfig+0x114>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d103      	bne.n	8003c0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe fe92 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	e002      	b.n	8003c12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f7fe fe7a 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8003c10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	0119      	lsls	r1, r3, #4
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2064      	movs	r0, #100	; 0x64
 8003c52:	fb00 f303 	mul.w	r3, r0, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c68:	4419      	add	r1, r3
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009a      	lsls	r2, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c82:	fba3 0302 	umull	r0, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2064      	movs	r0, #100	; 0x64
 8003c8a:	fb00 f303 	mul.w	r3, r0, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40013800 	.word	0x40013800
 8003cb4:	51eb851f 	.word	0x51eb851f

08003cb8 <__libc_init_array>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	2600      	movs	r6, #0
 8003cbc:	4d0c      	ldr	r5, [pc, #48]	; (8003cf0 <__libc_init_array+0x38>)
 8003cbe:	4c0d      	ldr	r4, [pc, #52]	; (8003cf4 <__libc_init_array+0x3c>)
 8003cc0:	1b64      	subs	r4, r4, r5
 8003cc2:	10a4      	asrs	r4, r4, #2
 8003cc4:	42a6      	cmp	r6, r4
 8003cc6:	d109      	bne.n	8003cdc <__libc_init_array+0x24>
 8003cc8:	f000 f830 	bl	8003d2c <_init>
 8003ccc:	2600      	movs	r6, #0
 8003cce:	4d0a      	ldr	r5, [pc, #40]	; (8003cf8 <__libc_init_array+0x40>)
 8003cd0:	4c0a      	ldr	r4, [pc, #40]	; (8003cfc <__libc_init_array+0x44>)
 8003cd2:	1b64      	subs	r4, r4, r5
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	42a6      	cmp	r6, r4
 8003cd8:	d105      	bne.n	8003ce6 <__libc_init_array+0x2e>
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce0:	4798      	blx	r3
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7ee      	b.n	8003cc4 <__libc_init_array+0xc>
 8003ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cea:	4798      	blx	r3
 8003cec:	3601      	adds	r6, #1
 8003cee:	e7f2      	b.n	8003cd6 <__libc_init_array+0x1e>
 8003cf0:	08003d6c 	.word	0x08003d6c
 8003cf4:	08003d6c 	.word	0x08003d6c
 8003cf8:	08003d6c 	.word	0x08003d6c
 8003cfc:	08003d70 	.word	0x08003d70

08003d00 <memcpy>:
 8003d00:	440a      	add	r2, r1
 8003d02:	4291      	cmp	r1, r2
 8003d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d08:	d100      	bne.n	8003d0c <memcpy+0xc>
 8003d0a:	4770      	bx	lr
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d12:	4291      	cmp	r1, r2
 8003d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d18:	d1f9      	bne.n	8003d0e <memcpy+0xe>
 8003d1a:	bd10      	pop	{r4, pc}

08003d1c <memset>:
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4402      	add	r2, r0
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d100      	bne.n	8003d26 <memset+0xa>
 8003d24:	4770      	bx	lr
 8003d26:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2a:	e7f9      	b.n	8003d20 <memset+0x4>

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
