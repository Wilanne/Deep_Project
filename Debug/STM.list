
STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb0  08003eb0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb0  08003eb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000010  08003ec8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08003ec8  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8cf  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002407  00000000  00000000  0002f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00031d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00032c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020d0  00000000  00000000  00033a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbac  00000000  00000000  00035b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887a2  00000000  00000000  000456c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cde66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  000cdebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e70 	.word	0x08003e70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003e70 	.word	0x08003e70

0800014c <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a06      	ldr	r2, [pc, #24]	; (8000170 <HAL_SPI_TxCpltCallback+0x24>)
 8000158:	4293      	cmp	r3, r2
 800015a:	d105      	bne.n	8000168 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <HAL_SPI_TxCpltCallback+0x28>)
 8000164:	f001 fd10 	bl	8001b88 <HAL_GPIO_WritePin>
  }
}
 8000168:	bf00      	nop
 800016a:	3708      	adds	r7, #8
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200001f0 	.word	0x200001f0
 8000174:	40010c00 	.word	0x40010c00

08000178 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000182:	bf00      	nop
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <ILI9341_SPI_Tx+0x30>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	689b      	ldr	r3, [r3, #8]
 800018a:	f003 0302 	and.w	r3, r3, #2
 800018e:	2b02      	cmp	r3, #2
 8000190:	d1f8      	bne.n	8000184 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000192:	1dfb      	adds	r3, r7, #7
 8000194:	2201      	movs	r2, #1
 8000196:	4619      	mov	r1, r3
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <ILI9341_SPI_Tx+0x30>)
 800019a:	f002 fb09 	bl	80027b0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200001f0 	.word	0x200001f0

080001ac <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	460b      	mov	r3, r1
 80001b6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80001b8:	bf00      	nop
 80001ba:	4b08      	ldr	r3, [pc, #32]	; (80001dc <ILI9341_SPI_TxBuffer+0x30>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	f003 0302 	and.w	r3, r3, #2
 80001c4:	2b02      	cmp	r3, #2
 80001c6:	d1f8      	bne.n	80001ba <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80001c8:	887b      	ldrh	r3, [r7, #2]
 80001ca:	461a      	mov	r2, r3
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	4803      	ldr	r0, [pc, #12]	; (80001dc <ILI9341_SPI_TxBuffer+0x30>)
 80001d0:	f002 faee 	bl	80027b0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	200001f0 	.word	0x200001f0

080001e0 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80001ea:	2200      	movs	r2, #0
 80001ec:	2101      	movs	r1, #1
 80001ee:	4808      	ldr	r0, [pc, #32]	; (8000210 <ILI9341_WriteCommand+0x30>)
 80001f0:	f001 fcca 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fa:	4805      	ldr	r0, [pc, #20]	; (8000210 <ILI9341_WriteCommand+0x30>)
 80001fc:	f001 fcc4 	bl	8001b88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	4618      	mov	r0, r3
 8000204:	f7ff ffb8 	bl	8000178 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010c00 	.word	0x40010c00

08000214 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800021e:	2201      	movs	r2, #1
 8000220:	2101      	movs	r1, #1
 8000222:	4808      	ldr	r0, [pc, #32]	; (8000244 <ILI9341_WriteData+0x30>)
 8000224:	f001 fcb0 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <ILI9341_WriteData+0x30>)
 8000230:	f001 fcaa 	bl	8001b88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	4618      	mov	r0, r3
 8000238:	f7ff ff9e 	bl	8000178 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00

08000248 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	4808      	ldr	r0, [pc, #32]	; (800027c <ILI9341_WriteBuffer+0x34>)
 800025a:	f001 fc95 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800025e:	2200      	movs	r2, #0
 8000260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000264:	4805      	ldr	r0, [pc, #20]	; (800027c <ILI9341_WriteBuffer+0x34>)
 8000266:	f001 fc8f 	bl	8001b88 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800026a:	887b      	ldrh	r3, [r7, #2]
 800026c:	4619      	mov	r1, r3
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f7ff ff9c 	bl	80001ac <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40010c00 	.word	0x40010c00

08000280 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4604      	mov	r4, r0
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4623      	mov	r3, r4
 8000290:	80fb      	strh	r3, [r7, #6]
 8000292:	4603      	mov	r3, r0
 8000294:	80bb      	strh	r3, [r7, #4]
 8000296:	460b      	mov	r3, r1
 8000298:	807b      	strh	r3, [r7, #2]
 800029a:	4613      	mov	r3, r2
 800029c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	0a1b      	lsrs	r3, r3, #8
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	0a1b      	lsrs	r3, r3, #8
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80002b8:	887b      	ldrh	r3, [r7, #2]
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80002be:	202a      	movs	r0, #42	; 0x2a
 80002c0:	f7ff ff8e 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80002c4:	f107 030c 	add.w	r3, r7, #12
 80002c8:	2104      	movs	r1, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffbc 	bl	8000248 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80002d0:	88bb      	ldrh	r3, [r7, #4]
 80002d2:	0a1b      	lsrs	r3, r3, #8
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80002da:	88bb      	ldrh	r3, [r7, #4]
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	0a1b      	lsrs	r3, r3, #8
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80002ea:	883b      	ldrh	r3, [r7, #0]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80002f0:	202b      	movs	r0, #43	; 0x2b
 80002f2:	f7ff ff75 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80002f6:	f107 030c 	add.w	r3, r7, #12
 80002fa:	2104      	movs	r1, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffa3 	bl	8000248 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000302:	202c      	movs	r0, #44	; 0x2c
 8000304:	f7ff ff6c 	bl	80001e0 <ILI9341_WriteCommand>
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	bd90      	pop	{r4, r7, pc}

08000310 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000314:	2200      	movs	r2, #0
 8000316:	2102      	movs	r1, #2
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <ILI9341_Reset+0x40>)
 800031a:	f001 fc35 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800031e:	200a      	movs	r0, #10
 8000320:	f000 ff18 	bl	8001154 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032a:	4809      	ldr	r0, [pc, #36]	; (8000350 <ILI9341_Reset+0x40>)
 800032c:	f001 fc2c 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000330:	200a      	movs	r0, #10
 8000332:	f000 ff0f 	bl	8001154 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000336:	2201      	movs	r2, #1
 8000338:	2102      	movs	r1, #2
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <ILI9341_Reset+0x40>)
 800033c:	f001 fc24 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000346:	4802      	ldr	r0, [pc, #8]	; (8000350 <ILI9341_Reset+0x40>)
 8000348:	f001 fc1e 	bl	8001b88 <HAL_GPIO_WritePin>
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40010c00 	.word	0x40010c00

08000354 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000358:	2201      	movs	r2, #1
 800035a:	2102      	movs	r1, #2
 800035c:	4802      	ldr	r0, [pc, #8]	; (8000368 <ILI9341_Enable+0x14>)
 800035e:	f001 fc13 	bl	8001b88 <HAL_GPIO_WritePin>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40010c00 	.word	0x40010c00

0800036c <ILI9341_Init>:

void ILI9341_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000370:	f7ff fff0 	bl	8000354 <ILI9341_Enable>
	ILI9341_Reset();
 8000374:	f7ff ffcc 	bl	8000310 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000378:	2001      	movs	r0, #1
 800037a:	f7ff ff31 	bl	80001e0 <ILI9341_WriteCommand>
	HAL_Delay(10);
 800037e:	200a      	movs	r0, #10
 8000380:	f000 fee8 	bl	8001154 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000384:	20cb      	movs	r0, #203	; 0xcb
 8000386:	f7ff ff2b 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800038a:	2039      	movs	r0, #57	; 0x39
 800038c:	f7ff ff42 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000390:	202c      	movs	r0, #44	; 0x2c
 8000392:	f7ff ff3f 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff ff3c 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800039c:	2034      	movs	r0, #52	; 0x34
 800039e:	f7ff ff39 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80003a2:	2002      	movs	r0, #2
 80003a4:	f7ff ff36 	bl	8000214 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80003a8:	20cf      	movs	r0, #207	; 0xcf
 80003aa:	f7ff ff19 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80003ae:	2000      	movs	r0, #0
 80003b0:	f7ff ff30 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80003b4:	20c1      	movs	r0, #193	; 0xc1
 80003b6:	f7ff ff2d 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80003ba:	2030      	movs	r0, #48	; 0x30
 80003bc:	f7ff ff2a 	bl	8000214 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80003c0:	20e8      	movs	r0, #232	; 0xe8
 80003c2:	f7ff ff0d 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80003c6:	2085      	movs	r0, #133	; 0x85
 80003c8:	f7ff ff24 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff21 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80003d2:	2078      	movs	r0, #120	; 0x78
 80003d4:	f7ff ff1e 	bl	8000214 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80003d8:	20ea      	movs	r0, #234	; 0xea
 80003da:	f7ff ff01 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff ff18 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80003e4:	2000      	movs	r0, #0
 80003e6:	f7ff ff15 	bl	8000214 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80003ea:	20ed      	movs	r0, #237	; 0xed
 80003ec:	f7ff fef8 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f7ff ff0f 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80003f6:	2003      	movs	r0, #3
 80003f8:	f7ff ff0c 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80003fc:	2012      	movs	r0, #18
 80003fe:	f7ff ff09 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000402:	2081      	movs	r0, #129	; 0x81
 8000404:	f7ff ff06 	bl	8000214 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000408:	20f7      	movs	r0, #247	; 0xf7
 800040a:	f7ff fee9 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800040e:	2020      	movs	r0, #32
 8000410:	f7ff ff00 	bl	8000214 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000414:	20c0      	movs	r0, #192	; 0xc0
 8000416:	f7ff fee3 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800041a:	2023      	movs	r0, #35	; 0x23
 800041c:	f7ff fefa 	bl	8000214 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000420:	20c1      	movs	r0, #193	; 0xc1
 8000422:	f7ff fedd 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000426:	2010      	movs	r0, #16
 8000428:	f7ff fef4 	bl	8000214 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800042c:	20c5      	movs	r0, #197	; 0xc5
 800042e:	f7ff fed7 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000432:	203e      	movs	r0, #62	; 0x3e
 8000434:	f7ff feee 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000438:	2028      	movs	r0, #40	; 0x28
 800043a:	f7ff feeb 	bl	8000214 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800043e:	20c7      	movs	r0, #199	; 0xc7
 8000440:	f7ff fece 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000444:	2086      	movs	r0, #134	; 0x86
 8000446:	f7ff fee5 	bl	8000214 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800044a:	2036      	movs	r0, #54	; 0x36
 800044c:	f7ff fec8 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000450:	2048      	movs	r0, #72	; 0x48
 8000452:	f7ff fedf 	bl	8000214 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000456:	203a      	movs	r0, #58	; 0x3a
 8000458:	f7ff fec2 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 800045c:	2055      	movs	r0, #85	; 0x55
 800045e:	f7ff fed9 	bl	8000214 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000462:	20b1      	movs	r0, #177	; 0xb1
 8000464:	f7ff febc 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff fed3 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800046e:	2018      	movs	r0, #24
 8000470:	f7ff fed0 	bl	8000214 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000474:	20b6      	movs	r0, #182	; 0xb6
 8000476:	f7ff feb3 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800047a:	2008      	movs	r0, #8
 800047c:	f7ff feca 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000480:	2082      	movs	r0, #130	; 0x82
 8000482:	f7ff fec7 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000486:	2027      	movs	r0, #39	; 0x27
 8000488:	f7ff fec4 	bl	8000214 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800048c:	20f2      	movs	r0, #242	; 0xf2
 800048e:	f7ff fea7 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000492:	2000      	movs	r0, #0
 8000494:	f7ff febe 	bl	8000214 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000498:	2026      	movs	r0, #38	; 0x26
 800049a:	f7ff fea1 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff feb8 	bl	8000214 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80004a4:	20e0      	movs	r0, #224	; 0xe0
 80004a6:	f7ff fe9b 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80004aa:	200f      	movs	r0, #15
 80004ac:	f7ff feb2 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80004b0:	2031      	movs	r0, #49	; 0x31
 80004b2:	f7ff feaf 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80004b6:	202b      	movs	r0, #43	; 0x2b
 80004b8:	f7ff feac 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80004bc:	200c      	movs	r0, #12
 80004be:	f7ff fea9 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80004c2:	200e      	movs	r0, #14
 80004c4:	f7ff fea6 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80004c8:	2008      	movs	r0, #8
 80004ca:	f7ff fea3 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80004ce:	204e      	movs	r0, #78	; 0x4e
 80004d0:	f7ff fea0 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80004d4:	20f1      	movs	r0, #241	; 0xf1
 80004d6:	f7ff fe9d 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80004da:	2037      	movs	r0, #55	; 0x37
 80004dc:	f7ff fe9a 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80004e0:	2007      	movs	r0, #7
 80004e2:	f7ff fe97 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80004e6:	2010      	movs	r0, #16
 80004e8:	f7ff fe94 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f7ff fe91 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80004f2:	200e      	movs	r0, #14
 80004f4:	f7ff fe8e 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80004f8:	2009      	movs	r0, #9
 80004fa:	f7ff fe8b 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff fe88 	bl	8000214 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000504:	20e1      	movs	r0, #225	; 0xe1
 8000506:	f7ff fe6b 	bl	80001e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff fe82 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000510:	200e      	movs	r0, #14
 8000512:	f7ff fe7f 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000516:	2014      	movs	r0, #20
 8000518:	f7ff fe7c 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800051c:	2003      	movs	r0, #3
 800051e:	f7ff fe79 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000522:	2011      	movs	r0, #17
 8000524:	f7ff fe76 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000528:	2007      	movs	r0, #7
 800052a:	f7ff fe73 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800052e:	2031      	movs	r0, #49	; 0x31
 8000530:	f7ff fe70 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000534:	20c1      	movs	r0, #193	; 0xc1
 8000536:	f7ff fe6d 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800053a:	2048      	movs	r0, #72	; 0x48
 800053c:	f7ff fe6a 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000540:	2008      	movs	r0, #8
 8000542:	f7ff fe67 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000546:	200f      	movs	r0, #15
 8000548:	f7ff fe64 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800054c:	200c      	movs	r0, #12
 800054e:	f7ff fe61 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000552:	2031      	movs	r0, #49	; 0x31
 8000554:	f7ff fe5e 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000558:	2036      	movs	r0, #54	; 0x36
 800055a:	f7ff fe5b 	bl	8000214 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800055e:	200f      	movs	r0, #15
 8000560:	f7ff fe58 	bl	8000214 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000564:	2011      	movs	r0, #17
 8000566:	f7ff fe3b 	bl	80001e0 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f000 fdf2 	bl	8001154 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000570:	2029      	movs	r0, #41	; 0x29
 8000572:	f7ff fe35 	bl	80001e0 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f802 	bl	8000580 <ILI9341_SetRotation>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800058a:	2036      	movs	r0, #54	; 0x36
 800058c:	f7ff fe28 	bl	80001e0 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fddf 	bl	8001154 <HAL_Delay>

	switch(rotation)
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d837      	bhi.n	800060c <ILI9341_SetRotation+0x8c>
 800059c:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <ILI9341_SetRotation+0x24>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005cb 	.word	0x080005cb
 80005ac:	080005e1 	.word	0x080005e1
 80005b0:	080005f7 	.word	0x080005f7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80005b4:	2048      	movs	r0, #72	; 0x48
 80005b6:	f7ff fe2d 	bl	8000214 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <ILI9341_SetRotation+0x98>)
 80005bc:	22f0      	movs	r2, #240	; 0xf0
 80005be:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <ILI9341_SetRotation+0x9c>)
 80005c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005c6:	801a      	strh	r2, [r3, #0]
		break;
 80005c8:	e021      	b.n	800060e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80005ca:	2028      	movs	r0, #40	; 0x28
 80005cc:	f7ff fe22 	bl	8000214 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <ILI9341_SetRotation+0x98>)
 80005d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005d6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <ILI9341_SetRotation+0x9c>)
 80005da:	22f0      	movs	r2, #240	; 0xf0
 80005dc:	801a      	strh	r2, [r3, #0]
		break;
 80005de:	e016      	b.n	800060e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80005e0:	2088      	movs	r0, #136	; 0x88
 80005e2:	f7ff fe17 	bl	8000214 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <ILI9341_SetRotation+0x98>)
 80005e8:	22f0      	movs	r2, #240	; 0xf0
 80005ea:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <ILI9341_SetRotation+0x9c>)
 80005ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005f2:	801a      	strh	r2, [r3, #0]
		break;
 80005f4:	e00b      	b.n	800060e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80005f6:	20e8      	movs	r0, #232	; 0xe8
 80005f8:	f7ff fe0c 	bl	8000214 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <ILI9341_SetRotation+0x98>)
 80005fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000602:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <ILI9341_SetRotation+0x9c>)
 8000606:	22f0      	movs	r2, #240	; 0xf0
 8000608:	801a      	strh	r2, [r3, #0]
		break;
 800060a:	e000      	b.n	800060e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800060c:	bf00      	nop
	}
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000002 	.word	0x20000002
 800061c:	20000000 	.word	0x20000000

08000620 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b08c      	sub	sp, #48	; 0x30
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	80fb      	strh	r3, [r7, #6]
 800062c:	466b      	mov	r3, sp
 800062e:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800063c:	d202      	bcs.n	8000644 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
 8000642:	e002      	b.n	800064a <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000644:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2101      	movs	r1, #1
 800064e:	483e      	ldr	r0, [pc, #248]	; (8000748 <ILI9341_DrawColorBurst+0x128>)
 8000650:	f001 fa9a 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065a:	483b      	ldr	r0, [pc, #236]	; (8000748 <ILI9341_DrawColorBurst+0x128>)
 800065c:	f001 fa94 	bl	8001b88 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	b29b      	uxth	r3, r3
 8000666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 800066a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800066c:	4623      	mov	r3, r4
 800066e:	3b01      	subs	r3, #1
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	4620      	mov	r0, r4
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	f04f 0300 	mov.w	r3, #0
 8000680:	00cb      	lsls	r3, r1, #3
 8000682:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000686:	00c2      	lsls	r2, r0, #3
 8000688:	4620      	mov	r0, r4
 800068a:	f04f 0100 	mov.w	r1, #0
 800068e:	f04f 0200 	mov.w	r2, #0
 8000692:	f04f 0300 	mov.w	r3, #0
 8000696:	00cb      	lsls	r3, r1, #3
 8000698:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800069c:	00c2      	lsls	r2, r0, #3
 800069e:	1de3      	adds	r3, r4, #7
 80006a0:	08db      	lsrs	r3, r3, #3
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	ebad 0d03 	sub.w	sp, sp, r3
 80006a8:	466b      	mov	r3, sp
 80006aa:	3300      	adds	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006b2:	e00e      	b.n	80006d2 <ILI9341_DrawColorBurst+0xb2>
	{
		BurstBuffer[j] = chifted;
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b8:	4413      	add	r3, r2
 80006ba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80006be:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80006c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c2:	3301      	adds	r3, #1
 80006c4:	88fa      	ldrh	r2, [r7, #6]
 80006c6:	b2d1      	uxtb	r1, r2
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80006cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ce:	3302      	adds	r3, #2
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3ec      	bcc.n	80006b4 <ILI9341_DrawColorBurst+0x94>
	}

	uint32_t SendingSize = size * 2;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80006f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006f4:	fb01 f202 	mul.w	r2, r1, r2
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d010      	beq.n	8000724 <ILI9341_DrawColorBurst+0x104>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000706:	e009      	b.n	800071c <ILI9341_DrawColorBurst+0xfc>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000708:	69b9      	ldr	r1, [r7, #24]
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	b29a      	uxth	r2, r3
 800070e:	230a      	movs	r3, #10
 8000710:	480e      	ldr	r0, [pc, #56]	; (800074c <ILI9341_DrawColorBurst+0x12c>)
 8000712:	f001 ff11 	bl	8002538 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000718:	3301      	adds	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800071c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3f1      	bcc.n	8000708 <ILI9341_DrawColorBurst+0xe8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000724:	69b9      	ldr	r1, [r7, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	b29a      	uxth	r2, r3
 800072a:	230a      	movs	r3, #10
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <ILI9341_DrawColorBurst+0x12c>)
 800072e:	f001 ff03 	bl	8002538 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <ILI9341_DrawColorBurst+0x128>)
 800073a:	f001 fa25 	bl	8001b88 <HAL_GPIO_WritePin>
 800073e:	46ad      	mov	sp, r5
}
 8000740:	bf00      	nop
 8000742:	3730      	adds	r7, #48	; 0x30
 8000744:	46bd      	mov	sp, r7
 8000746:	bdb0      	pop	{r4, r5, r7, pc}
 8000748:	40010c00 	.word	0x40010c00
 800074c:	200001f0 	.word	0x200001f0

08000750 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <ILI9341_FillScreen+0x44>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <ILI9341_FillScreen+0x48>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff fd89 	bl	8000280 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <ILI9341_FillScreen+0x44>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <ILI9341_FillScreen+0x48>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	fb03 f302 	mul.w	r3, r3, r2
 8000780:	461a      	mov	r2, r3
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff4a 	bl	8000620 <ILI9341_DrawColorBurst>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000002 	.word	0x20000002
 8000798:	20000000 	.word	0x20000000

0800079c <PixelArt_InitScreen>:
#include "PixelArt.h"
#include "Pixils.h"

uint8_t delay = 115;

void PixelArt_InitScreen() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	ILI9341_Init();
 80007a0:	f7ff fde4 	bl	800036c <ILI9341_Init>
	ILI9341_FillScreen(DGY);
 80007a4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80007a8:	f7ff ffd2 	bl	8000750 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fee7 	bl	8000580 <ILI9341_SetRotation>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b090      	sub	sp, #64	; 0x40
 80007ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	2228      	movs	r2, #40	; 0x28
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 fb4b 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e6:	2301      	movs	r3, #1
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f9fc 	bl	8001bfc <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800080a:	f000 f9be 	bl	8000b8a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2102      	movs	r1, #2
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fc67 	bl	80020fc <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000834:	f000 f9a9 	bl	8000b8a <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3740      	adds	r7, #64	; 0x40
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <MX_SPI1_Init>:
/**
  * @brief SPI init
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_SPI1_Init+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_SPI1_Init+0x64>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000874:	2208      	movs	r2, #8
 8000876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SPI1_Init+0x64>)
 800088c:	220a      	movs	r2, #10
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000892:	f001 fdcd 	bl	8002430 <HAL_SPI_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800089c:	f000 f975 	bl	8000b8a <Error_Handler>
  }

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200001f0 	.word	0x200001f0
 80008a8:	40013000 	.word	0x40013000

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c0:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a37      	ldr	r2, [pc, #220]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_GPIO_Init+0xf8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_GPIO_Init+0xf8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a25      	ldr	r2, [pc, #148]	; (80009a4 <MX_GPIO_Init+0xf8>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_GPIO_Init+0xf8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2120      	movs	r1, #32
 8000924:	4820      	ldr	r0, [pc, #128]	; (80009a8 <MX_GPIO_Init+0xfc>)
 8000926:	f001 f92f 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f240 4103 	movw	r1, #1027	; 0x403
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <MX_GPIO_Init+0x100>)
 8000932:	f001 f929 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x104>)
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4619      	mov	r1, r3
 800094a:	481a      	ldr	r0, [pc, #104]	; (80009b4 <MX_GPIO_Init+0x108>)
 800094c:	f000 ff98 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000950:	2320      	movs	r3, #32
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	4810      	ldr	r0, [pc, #64]	; (80009a8 <MX_GPIO_Init+0xfc>)
 8000968:	f000 ff8a 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 800096c:	f240 4303 	movw	r3, #1027	; 0x403
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <MX_GPIO_Init+0x100>)
 8000986:	f000 ff7b 	bl	8001880 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f000 fcdb 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000994:	2028      	movs	r0, #40	; 0x28
 8000996:	f000 fcf4 	bl	8001382 <HAL_NVIC_EnableIRQ>

}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	10110000 	.word	0x10110000
 80009b4:	40011000 	.word	0x40011000

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_USART2_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f003 f936 	bl	8003c60 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f8c6 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000290 	.word	0x20000290
 8000a08:	40004400 	.word	0x40004400

08000a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_DMA_Init+0x48>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <MX_DMA_Init+0x48>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6153      	str	r3, [r2, #20]
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_DMA_Init+0x48>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	200d      	movs	r0, #13
 8000a30:	f000 fc8b 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a34:	200d      	movs	r0, #13
 8000a36:	f000 fca4 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 fc83 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a44:	200f      	movs	r0, #15
 8000a46:	f000 fc9c 	bl	8001382 <HAL_NVIC_EnableIRQ>

}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	; 0x38
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000a9e:	2259      	movs	r2, #89	; 0x59
 8000aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aae:	4823      	ldr	r0, [pc, #140]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000ab0:	f002 f86e 	bl	8002b90 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000aba:	f000 f866 	bl	8000b8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481c      	ldr	r0, [pc, #112]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000acc:	f002 fc1e 	bl	800330c <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000ad6:	f000 f858 	bl	8000b8a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ada:	4818      	ldr	r0, [pc, #96]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000adc:	f002 f8a7 	bl	8002c2e <HAL_TIM_PWM_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000ae6:	f000 f850 	bl	8000b8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	4619      	mov	r1, r3
 8000af8:	4810      	ldr	r0, [pc, #64]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000afa:	f003 f853 	bl	8003ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b04:	f000 f841 	bl	8000b8a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b08:	2360      	movs	r3, #96	; 0x60
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000b20:	f002 fb36 	bl	8003190 <HAL_TIM_PWM_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000b2a:	f000 f82e 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <MX_TIM2_Init+0xe4>)
 8000b30:	f000 f922 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 8000b34:	bf00      	nop
 8000b36:	3738      	adds	r7, #56	; 0x38
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000248 	.word	0x20000248

08000b40 <Init_All>:

void Init_All(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	  HAL_Init();
 8000b44:	f000 faa4 	bl	8001090 <HAL_Init>
	  SystemClock_Config();
 8000b48:	f7ff fe35 	bl	80007b6 <SystemClock_Config>

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000b4c:	f7ff feae 	bl	80008ac <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 8000b50:	f7ff ff32 	bl	80009b8 <MX_USART2_UART_Init>
	  MX_DMA_Init();
 8000b54:	f7ff ff5a 	bl	8000a0c <MX_DMA_Init>
	  MX_TIM2_Init();
 8000b58:	f7ff ff7e 	bl	8000a58 <MX_TIM2_Init>
	  MX_SPI1_Init();
 8000b5c:	f7ff fe70 	bl	8000840 <MX_SPI1_Init>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <main>:
#include "Pixils.h"
#include "PixelArt.h"

// Da main function boy
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	Init_All();
 8000b68:	f7ff ffea 	bl	8000b40 <Init_All>
	PixelArt_InitScreen();
 8000b6c:	f7ff fe16 	bl	800079c <PixelArt_InitScreen>
		/*
		for (int i = 0; i < 5; ++i) {
			Set_LED(i, 255, 0, 0);
		}
		*/
		Set_LED(0, 0, 255, 0);
 8000b70:	2300      	movs	r3, #0
 8000b72:	22ff      	movs	r2, #255	; 0xff
 8000b74:	2100      	movs	r1, #0
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f9ca 	bl	8000f10 <Set_LED>
		WS2812_Send();
 8000b7c:	f000 f9f4 	bl	8000f68 <WS2812_Send>
		HAL_Delay(2000);
 8000b80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b84:	f000 fae6 	bl	8001154 <HAL_Delay>
		Set_LED(0, 0, 255, 0);
 8000b88:	e7f2      	b.n	8000b70 <main+0xc>

08000b8a <Error_Handler>:
	}
}

// keske c ksa
void Error_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8e:	b672      	cpsid	i
}
 8000b90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <Error_Handler+0x8>

08000b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_MspInit+0x60>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_MspInit+0x60>)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <HAL_SPI_MspInit+0xd8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d157      	bne.n	8000cc8 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_SPI_MspInit+0xdc>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <HAL_SPI_MspInit+0xdc>)
 8000c1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_SPI_MspInit+0xdc>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_SPI_MspInit+0xdc>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <HAL_SPI_MspInit+0xdc>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_SPI_MspInit+0xdc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c48:	2328      	movs	r3, #40	; 0x28
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481f      	ldr	r0, [pc, #124]	; (8000cd8 <HAL_SPI_MspInit+0xe0>)
 8000c5c:	f000 fe10 	bl	8001880 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <HAL_SPI_MspInit+0xe4>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0xe4>)
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_SPI_MspInit+0xec>)
 8000c80:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000cae:	f000 fb83 	bl	80013b8 <HAL_DMA_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8000cb8:	f7ff ff67 	bl	8000b8a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000cc0:	649a      	str	r2, [r3, #72]	; 0x48
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_SPI_MspInit+0xe8>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	200002d4 	.word	0x200002d4
 8000ce4:	40020030 	.word	0x40020030

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d133      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_TIM_Base_MspInit+0x84>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <HAL_TIM_Base_MspInit+0x84>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_TIM_Base_MspInit+0x84>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_TIM_Base_MspInit+0x8c>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d38:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d48:	f000 fb36 	bl	80013b8 <HAL_DMA_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000d52:	f7ff ff1a 	bl	8000b8a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_TIM_Base_MspInit+0x88>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	20000184 	.word	0x20000184
 8000d74:	40020058 	.word	0x40020058

08000d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d96:	d117      	bne.n	8000dc8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_TIM_MspPostInit+0x58>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_TIM_MspPostInit+0x58>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_TIM_MspPostInit+0x58>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db0:	2301      	movs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <HAL_TIM_MspPostInit+0x5c>)
 8000dc4:	f000 fd5c 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <HAL_UART_MspInit+0x70>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d123      	bne.n	8000e40 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0x74>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <HAL_UART_MspInit+0x74>)
 8000dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e02:	61d3      	str	r3, [r2, #28]
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0x74>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_UART_MspInit+0x74>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_UART_MspInit+0x74>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_UART_MspInit+0x74>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_UART_MspInit+0x78>)
 8000e3c:	f000 fd20 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010800 	.word	0x40010800

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9a:	f000 f93f 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA1_Channel3_IRQHandler+0x10>)
 8000eaa:	f000 fbb5 	bl	8001618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200002d4 	.word	0x200002d4

08000eb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA1_Channel5_IRQHandler+0x10>)
 8000ebe:	f000 fbab 	bl	8001618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000184 	.word	0x20000184

08000ecc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ed0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed4:	f000 fe70 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief TIM2 Finish Callback
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000ef4:	f002 f88e 	bl	8003014 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000248 	.word	0x20000248
 8000f0c:	20000180 	.word	0x20000180

08000f10 <Set_LED>:
/**
  * @brief Set Led Function
  * @retval None
  */
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum].count = LEDnum;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	b2d9      	uxtb	r1, r3
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <Set_LED+0x54>)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum].green = Green;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	b2d9      	uxtb	r1, r3
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <Set_LED+0x54>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	460a      	mov	r2, r1
 8000f38:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum].red = Red;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	b2d9      	uxtb	r1, r3
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <Set_LED+0x54>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	460a      	mov	r2, r1
 8000f48:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum].blue = Blue;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <Set_LED+0x54>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	70da      	strb	r2, [r3, #3]
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	200001c8 	.word	0x200001c8

08000f68 <WS2812_Send>:
/**
  * @brief Send The 24 bits To The Led Driver
  * @retval None
  */
void WS2812_Send (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	e036      	b.n	8000fe6 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i].green<<16) | (LED_Mod[i].red<<8) | (LED_Mod[i].blue));
#else
		color = ((LED_Data[i].green<<16) | (LED_Data[i].red<<8) | (LED_Data[i].blue));
 8000f78:	4a2e      	ldr	r2, [pc, #184]	; (8001034 <WS2812_Send+0xcc>)
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	789b      	ldrb	r3, [r3, #2]
 8000f82:	041a      	lsls	r2, r3, #16
 8000f84:	492b      	ldr	r1, [pc, #172]	; (8001034 <WS2812_Send+0xcc>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	431a      	orrs	r2, r3
 8000f92:	4928      	ldr	r1, [pc, #160]	; (8001034 <WS2812_Send+0xcc>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8000fa0:	2317      	movs	r3, #23
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e019      	b.n	8000fda <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <WS2812_Send+0xd0>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	213c      	movs	r1, #60	; 0x3c
 8000fbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fc2:	e004      	b.n	8000fce <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <WS2812_Send+0xd0>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	211e      	movs	r1, #30
 8000fca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dae2      	bge.n	8000fa6 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	ddc5      	ble.n	8000f78 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	e00a      	b.n	8001008 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <WS2812_Send+0xd0>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	3301      	adds	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b31      	cmp	r3, #49	; 0x31
 800100c:	ddf1      	ble.n	8000ff2 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	b29b      	uxth	r3, r3
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <WS2812_Send+0xd0>)
 8001014:	2100      	movs	r1, #0
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <WS2812_Send+0xd4>)
 8001018:	f001 fe62 	bl	8002ce0 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 800101c:	bf00      	nop
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <WS2812_Send+0xd8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0fb      	beq.n	800101e <WS2812_Send+0xb6>
	datasentflag = 0;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <WS2812_Send+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001c8 	.word	0x200001c8
 8001038:	2000002c 	.word	0x2000002c
 800103c:	20000248 	.word	0x20000248
 8001040:	20000180 	.word	0x20000180

08001044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800106a:	f7ff ff37 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f002 fed3 	bl	8003e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001072:	f7ff fd77 	bl	8000b64 <main>
  bx lr
 8001076:	4770      	bx	lr
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001080:	08003eb8 	.word	0x08003eb8
  ldr r2, =_sbss
 8001084:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001088:	2000031c 	.word	0x2000031c

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x28>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x28>)
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f947 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fd72 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f95f 	bl	800139e <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f927 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000004 	.word	0x20000004
 8001114:	2000000c 	.word	0x2000000c
 8001118:	20000008 	.word	0x20000008

0800111c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x1c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_IncTick+0x20>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000318 	.word	0x20000318

08001140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000318 	.word	0x20000318

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff fff0 	bl	8001140 <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffe0 	bl	8001140 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000000c 	.word	0x2000000c

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4906      	ldr	r1, [pc, #24]	; (8001234 <__NVIC_EnableIRQ+0x34>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff90 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff2d 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff42 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff90 	bl	800128c <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5f 	bl	8001238 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff35 	bl	8001200 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e043      	b.n	8001456 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_DMA_Init+0xa8>)
 80013d6:	4413      	add	r3, r2
 80013d8:	4a22      	ldr	r2, [pc, #136]	; (8001464 <HAL_DMA_Init+0xac>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	009a      	lsls	r2, r3, #2
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_DMA_Init+0xb0>)
 80013ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2202      	movs	r2, #2
 80013f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001402:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001406:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	bffdfff8 	.word	0xbffdfff8
 8001464:	cccccccd 	.word	0xcccccccd
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_DMA_Start_IT+0x20>
 8001488:	2302      	movs	r3, #2
 800148a:	e04a      	b.n	8001522 <HAL_DMA_Start_IT+0xb6>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800149a:	2b01      	cmp	r3, #1
 800149c:	d13a      	bne.n	8001514 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2202      	movs	r2, #2
 80014a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f9ae 	bl	8001824 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 020e 	orr.w	r2, r2, #14
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e00f      	b.n	8001502 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0204 	bic.w	r2, r2, #4
 80014f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 020a 	orr.w	r2, r2, #10
 8001500:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e005      	b.n	8001520 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800151c:	2302      	movs	r3, #2
 800151e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001520:	7dfb      	ldrb	r3, [r7, #23]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800153e:	2b02      	cmp	r3, #2
 8001540:	d005      	beq.n	800154e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2204      	movs	r2, #4
 8001546:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e051      	b.n	80015f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 020e 	bic.w	r2, r2, #14
 800155c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a22      	ldr	r2, [pc, #136]	; (80015fc <HAL_DMA_Abort_IT+0xd0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d029      	beq.n	80015cc <HAL_DMA_Abort_IT+0xa0>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a20      	ldr	r2, [pc, #128]	; (8001600 <HAL_DMA_Abort_IT+0xd4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d022      	beq.n	80015c8 <HAL_DMA_Abort_IT+0x9c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <HAL_DMA_Abort_IT+0xd8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d01a      	beq.n	80015c2 <HAL_DMA_Abort_IT+0x96>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_DMA_Abort_IT+0xdc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d012      	beq.n	80015bc <HAL_DMA_Abort_IT+0x90>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <HAL_DMA_Abort_IT+0xe0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00a      	beq.n	80015b6 <HAL_DMA_Abort_IT+0x8a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <HAL_DMA_Abort_IT+0xe4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d102      	bne.n	80015b0 <HAL_DMA_Abort_IT+0x84>
 80015aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015ae:	e00e      	b.n	80015ce <HAL_DMA_Abort_IT+0xa2>
 80015b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b4:	e00b      	b.n	80015ce <HAL_DMA_Abort_IT+0xa2>
 80015b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ba:	e008      	b.n	80015ce <HAL_DMA_Abort_IT+0xa2>
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	e005      	b.n	80015ce <HAL_DMA_Abort_IT+0xa2>
 80015c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c6:	e002      	b.n	80015ce <HAL_DMA_Abort_IT+0xa2>
 80015c8:	2310      	movs	r3, #16
 80015ca:	e000      	b.n	80015ce <HAL_DMA_Abort_IT+0xa2>
 80015cc:	2301      	movs	r3, #1
 80015ce:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_DMA_Abort_IT+0xe8>)
 80015d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
    } 
  }
  return status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40020008 	.word	0x40020008
 8001600:	4002001c 	.word	0x4002001c
 8001604:	40020030 	.word	0x40020030
 8001608:	40020044 	.word	0x40020044
 800160c:	40020058 	.word	0x40020058
 8001610:	4002006c 	.word	0x4002006c
 8001614:	40020000 	.word	0x40020000

08001618 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	2204      	movs	r2, #4
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d04f      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xc8>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d04a      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	2b00      	cmp	r3, #0
 8001656:	d107      	bne.n	8001668 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0204 	bic.w	r2, r2, #4
 8001666:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a66      	ldr	r2, [pc, #408]	; (8001808 <HAL_DMA_IRQHandler+0x1f0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d029      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xae>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a65      	ldr	r2, [pc, #404]	; (800180c <HAL_DMA_IRQHandler+0x1f4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d022      	beq.n	80016c2 <HAL_DMA_IRQHandler+0xaa>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a63      	ldr	r2, [pc, #396]	; (8001810 <HAL_DMA_IRQHandler+0x1f8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01a      	beq.n	80016bc <HAL_DMA_IRQHandler+0xa4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a62      	ldr	r2, [pc, #392]	; (8001814 <HAL_DMA_IRQHandler+0x1fc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d012      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x9e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a60      	ldr	r2, [pc, #384]	; (8001818 <HAL_DMA_IRQHandler+0x200>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00a      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x98>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a5f      	ldr	r2, [pc, #380]	; (800181c <HAL_DMA_IRQHandler+0x204>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d102      	bne.n	80016aa <HAL_DMA_IRQHandler+0x92>
 80016a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a8:	e00e      	b.n	80016c8 <HAL_DMA_IRQHandler+0xb0>
 80016aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016ae:	e00b      	b.n	80016c8 <HAL_DMA_IRQHandler+0xb0>
 80016b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016b4:	e008      	b.n	80016c8 <HAL_DMA_IRQHandler+0xb0>
 80016b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ba:	e005      	b.n	80016c8 <HAL_DMA_IRQHandler+0xb0>
 80016bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c0:	e002      	b.n	80016c8 <HAL_DMA_IRQHandler+0xb0>
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	e000      	b.n	80016c8 <HAL_DMA_IRQHandler+0xb0>
 80016c6:	2304      	movs	r3, #4
 80016c8:	4a55      	ldr	r2, [pc, #340]	; (8001820 <HAL_DMA_IRQHandler+0x208>)
 80016ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8094 	beq.w	80017fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016de:	e08e      	b.n	80017fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2202      	movs	r2, #2
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d056      	beq.n	800179e <HAL_DMA_IRQHandler+0x186>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d051      	beq.n	800179e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10b      	bne.n	8001720 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 020a 	bic.w	r2, r2, #10
 8001716:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a38      	ldr	r2, [pc, #224]	; (8001808 <HAL_DMA_IRQHandler+0x1f0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d029      	beq.n	800177e <HAL_DMA_IRQHandler+0x166>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a37      	ldr	r2, [pc, #220]	; (800180c <HAL_DMA_IRQHandler+0x1f4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d022      	beq.n	800177a <HAL_DMA_IRQHandler+0x162>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a35      	ldr	r2, [pc, #212]	; (8001810 <HAL_DMA_IRQHandler+0x1f8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01a      	beq.n	8001774 <HAL_DMA_IRQHandler+0x15c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a34      	ldr	r2, [pc, #208]	; (8001814 <HAL_DMA_IRQHandler+0x1fc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d012      	beq.n	800176e <HAL_DMA_IRQHandler+0x156>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a32      	ldr	r2, [pc, #200]	; (8001818 <HAL_DMA_IRQHandler+0x200>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00a      	beq.n	8001768 <HAL_DMA_IRQHandler+0x150>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_DMA_IRQHandler+0x204>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d102      	bne.n	8001762 <HAL_DMA_IRQHandler+0x14a>
 800175c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001760:	e00e      	b.n	8001780 <HAL_DMA_IRQHandler+0x168>
 8001762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001766:	e00b      	b.n	8001780 <HAL_DMA_IRQHandler+0x168>
 8001768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800176c:	e008      	b.n	8001780 <HAL_DMA_IRQHandler+0x168>
 800176e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001772:	e005      	b.n	8001780 <HAL_DMA_IRQHandler+0x168>
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	e002      	b.n	8001780 <HAL_DMA_IRQHandler+0x168>
 800177a:	2320      	movs	r3, #32
 800177c:	e000      	b.n	8001780 <HAL_DMA_IRQHandler+0x168>
 800177e:	2302      	movs	r3, #2
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <HAL_DMA_IRQHandler+0x208>)
 8001782:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	2b00      	cmp	r3, #0
 8001792:	d034      	beq.n	80017fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800179c:	e02f      	b.n	80017fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2208      	movs	r2, #8
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d028      	beq.n	8001800 <HAL_DMA_IRQHandler+0x1e8>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d023      	beq.n	8001800 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 020e 	bic.w	r2, r2, #14
 80017c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	2101      	movs	r1, #1
 80017d2:	fa01 f202 	lsl.w	r2, r1, r2
 80017d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
    }
  }
  return;
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
}
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40020008 	.word	0x40020008
 800180c:	4002001c 	.word	0x4002001c
 8001810:	40020030 	.word	0x40020030
 8001814:	40020044 	.word	0x40020044
 8001818:	40020058 	.word	0x40020058
 800181c:	4002006c 	.word	0x4002006c
 8001820:	40020000 	.word	0x40020000

08001824 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d108      	bne.n	8001864 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001862:	e007      	b.n	8001874 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	60da      	str	r2, [r3, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	; 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e169      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001894:	2201      	movs	r2, #1
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8158 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a9a      	ldr	r2, [pc, #616]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d05e      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018bc:	4a98      	ldr	r2, [pc, #608]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d875      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018c2:	4a98      	ldr	r2, [pc, #608]	; (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d058      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018c8:	4a96      	ldr	r2, [pc, #600]	; (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d86f      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018ce:	4a96      	ldr	r2, [pc, #600]	; (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d052      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018d4:	4a94      	ldr	r2, [pc, #592]	; (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d869      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018da:	4a94      	ldr	r2, [pc, #592]	; (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04c      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018e0:	4a92      	ldr	r2, [pc, #584]	; (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d863      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018e6:	4a92      	ldr	r2, [pc, #584]	; (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d046      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018ec:	4a90      	ldr	r2, [pc, #576]	; (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d85d      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d82a      	bhi.n	800194c <HAL_GPIO_Init+0xcc>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d859      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <HAL_GPIO_Init+0x80>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	0800197b 	.word	0x0800197b
 8001904:	08001955 	.word	0x08001955
 8001908:	08001967 	.word	0x08001967
 800190c:	080019a9 	.word	0x080019a9
 8001910:	080019af 	.word	0x080019af
 8001914:	080019af 	.word	0x080019af
 8001918:	080019af 	.word	0x080019af
 800191c:	080019af 	.word	0x080019af
 8001920:	080019af 	.word	0x080019af
 8001924:	080019af 	.word	0x080019af
 8001928:	080019af 	.word	0x080019af
 800192c:	080019af 	.word	0x080019af
 8001930:	080019af 	.word	0x080019af
 8001934:	080019af 	.word	0x080019af
 8001938:	080019af 	.word	0x080019af
 800193c:	080019af 	.word	0x080019af
 8001940:	080019af 	.word	0x080019af
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001971 	.word	0x08001971
 800194c:	4a79      	ldr	r2, [pc, #484]	; (8001b34 <HAL_GPIO_Init+0x2b4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e029      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e024      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01f      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e01a      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e013      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e009      	b.n	80019b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          break;
 80019ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d801      	bhi.n	80019ba <HAL_GPIO_Init+0x13a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_Init+0x13e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	; 0xff
 80019c4:	d802      	bhi.n	80019cc <HAL_GPIO_Init+0x14c>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x152>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	3b08      	subs	r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	210f      	movs	r1, #15
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80b1 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a18:	4a48      	ldr	r2, [pc, #288]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a40      	ldr	r2, [pc, #256]	; (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	; (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	; (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	; (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	492c      	ldr	r1, [pc, #176]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4928      	ldr	r1, [pc, #160]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4922      	ldr	r1, [pc, #136]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491e      	ldr	r1, [pc, #120]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4918      	ldr	r1, [pc, #96]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4914      	ldr	r1, [pc, #80]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d021      	beq.n	8001b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e021      	b.n	8001b62 <HAL_GPIO_Init+0x2e2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40011400 	.word	0x40011400
 8001b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4909      	ldr	r1, [pc, #36]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae8e 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	372c      	adds	r7, #44	; 0x2c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f806 	bl	8001be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e26c      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8087 	beq.w	8001d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c1c:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d00c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c28:	4b8f      	ldr	r3, [pc, #572]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d112      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5e>
 8001c34:	4b8c      	ldr	r3, [pc, #560]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d10b      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c42:	4b89      	ldr	r3, [pc, #548]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d06c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x12c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d168      	bne.n	8001d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e246      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x76>
 8001c64:	4b80      	ldr	r3, [pc, #512]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a7f      	ldr	r2, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e02e      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x98>
 8001c7a:	4b7b      	ldr	r3, [pc, #492]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7a      	ldr	r2, [pc, #488]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b78      	ldr	r3, [pc, #480]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a77      	ldr	r2, [pc, #476]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e01d      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xbc>
 8001c9e:	4b72      	ldr	r3, [pc, #456]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a71      	ldr	r2, [pc, #452]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a6e      	ldr	r2, [pc, #440]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a6a      	ldr	r2, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a67      	ldr	r2, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fa32 	bl	8001140 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fa2e 	bl	8001140 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1fa      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b5d      	ldr	r3, [pc, #372]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe4>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa1e 	bl	8001140 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fa1a 	bl	8001140 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e1e6      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x10c>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d063      	beq.n	8001dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d36:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d42:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d11c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x18c>
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d116      	bne.n	8001d88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <HAL_RCC_OscConfig+0x176>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e1ba      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4939      	ldr	r1, [pc, #228]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	e03a      	b.n	8001dfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff f9d3 	bl	8001140 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9e:	f7ff f9cf 	bl	8001140 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e19b      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4927      	ldr	r1, [pc, #156]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
 8001dd0:	e015      	b.n	8001dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f9b2 	bl	8001140 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de0:	f7ff f9ae 	bl	8001140 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e17a      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d03a      	beq.n	8001e80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d019      	beq.n	8001e46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff f992 	bl	8001140 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff f98e 	bl	8001140 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e15a      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f000 fad8 	bl	80023f4 <RCC_Delay>
 8001e44:	e01c      	b.n	8001e80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f978 	bl	8001140 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e52:	e00f      	b.n	8001e74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f974 	bl	8001140 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d908      	bls.n	8001e74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e140      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	42420000 	.word	0x42420000
 8001e70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	4b9e      	ldr	r3, [pc, #632]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1e9      	bne.n	8001e54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a6 	beq.w	8001fda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b97      	ldr	r3, [pc, #604]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b94      	ldr	r3, [pc, #592]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a93      	ldr	r2, [pc, #588]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b91      	ldr	r3, [pc, #580]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b8e      	ldr	r3, [pc, #568]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b8b      	ldr	r3, [pc, #556]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a8a      	ldr	r2, [pc, #552]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f935 	bl	8001140 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7ff f931 	bl	8001140 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0fd      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b81      	ldr	r3, [pc, #516]	; (80020f4 <HAL_RCC_OscConfig+0x4f8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x312>
 8001f00:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a7a      	ldr	r2, [pc, #488]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	e02d      	b.n	8001f6a <HAL_RCC_OscConfig+0x36e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x334>
 8001f16:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a75      	ldr	r2, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	4b73      	ldr	r3, [pc, #460]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a72      	ldr	r2, [pc, #456]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	e01c      	b.n	8001f6a <HAL_RCC_OscConfig+0x36e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x356>
 8001f38:	4b6d      	ldr	r3, [pc, #436]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a6c      	ldr	r2, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a69      	ldr	r2, [pc, #420]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x36e>
 8001f52:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a66      	ldr	r2, [pc, #408]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a63      	ldr	r2, [pc, #396]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d015      	beq.n	8001f9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff f8e5 	bl	8001140 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff f8e1 	bl	8001140 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0ab      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <HAL_RCC_OscConfig+0x37e>
 8001f9c:	e014      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f8cf 	bl	8001140 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff f8cb 	bl	8001140 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e095      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ee      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a47      	ldr	r2, [pc, #284]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8081 	beq.w	80020e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe4:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d061      	beq.n	80020b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d146      	bne.n	8002086 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCC_OscConfig+0x4fc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f89f 	bl	8001140 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff f89b 	bl	8001140 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e067      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d108      	bne.n	8002040 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	492d      	ldr	r1, [pc, #180]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002040:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a19      	ldr	r1, [r3, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	430b      	orrs	r3, r1
 8002052:	4927      	ldr	r1, [pc, #156]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_RCC_OscConfig+0x4fc>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff f86f 	bl	8001140 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff f86b 	bl	8001140 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e037      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x46a>
 8002084:	e02f      	b.n	80020e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_RCC_OscConfig+0x4fc>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff f858 	bl	8001140 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f854 	bl	8001140 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e020      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x498>
 80020b2:	e018      	b.n	80020e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e013      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	42420060 	.word	0x42420060

080020fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0d0      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d910      	bls.n	8002140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4965      	ldr	r1, [pc, #404]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b63      	ldr	r3, [pc, #396]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0b8      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002162:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800217a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	494d      	ldr	r1, [pc, #308]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d040      	beq.n	800221c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d115      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e073      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4936      	ldr	r1, [pc, #216]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ec:	f7fe ffa8 	bl	8001140 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	e00a      	b.n	800220a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f7fe ffa4 	bl	8001140 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e053      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 020c 	and.w	r2, r3, #12
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	429a      	cmp	r2, r3
 800221a:	d1eb      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d210      	bcs.n	800224c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 0207 	bic.w	r2, r3, #7
 8002232:	4922      	ldr	r1, [pc, #136]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4916      	ldr	r1, [pc, #88]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800228a:	f000 f821 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 800228e:	4602      	mov	r2, r0
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	490a      	ldr	r1, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	5ccb      	ldrb	r3, [r1, r3]
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1cc>)
 80022a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1d0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe ff06 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40022000 	.word	0x40022000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	08003e98 	.word	0x08003e98
 80022c8:	20000004 	.word	0x20000004
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	b490      	push	{r4, r7}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022d8:	1d3c      	adds	r4, r7, #4
 80022da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022e0:	f240 2301 	movw	r3, #513	; 0x201
 80022e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x40>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x46>
 800230e:	e02d      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002312:	623b      	str	r3, [r7, #32]
      break;
 8002314:	e02d      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002322:	4413      	add	r3, r2
 8002324:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002328:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	0c5b      	lsrs	r3, r3, #17
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002342:	4413      	add	r3, r2
 8002344:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002348:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 800234e:	fb02 f203 	mul.w	r2, r2, r3
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	e004      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	623b      	str	r3, [r7, #32]
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236e:	623b      	str	r3, [r7, #32]
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	6a3b      	ldr	r3, [r7, #32]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bc90      	pop	{r4, r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	08003e88 	.word	0x08003e88
 8002384:	40021000 	.word	0x40021000
 8002388:	007a1200 	.word	0x007a1200
 800238c:	003d0900 	.word	0x003d0900

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a8:	f7ff fff2 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08003ea8 	.word	0x08003ea8

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d0:	f7ff ffde 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0adb      	lsrs	r3, r3, #11
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08003ea8 	.word	0x08003ea8

080023f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <RCC_Delay+0x34>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <RCC_Delay+0x38>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0a5b      	lsrs	r3, r3, #9
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002410:	bf00      	nop
  }
  while (Delay --);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	60fa      	str	r2, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <RCC_Delay+0x1c>
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	20000004 	.word	0x20000004
 800242c:	10624dd3 	.word	0x10624dd3

08002430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e076      	b.n	8002530 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002452:	d009      	beq.n	8002468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
 800245a:	e005      	b.n	8002468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fbb8 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	ea42 0103 	orr.w	r1, r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	0c1a      	lsrs	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f002 0204 	and.w	r2, r2, #4
 800250e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_SPI_Transmit+0x22>
 8002556:	2302      	movs	r3, #2
 8002558:	e126      	b.n	80027a8 <HAL_SPI_Transmit+0x270>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002562:	f7fe fded 	bl	8001140 <HAL_GetTick>
 8002566:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d002      	beq.n	800257e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002578:	2302      	movs	r3, #2
 800257a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800257c:	e10b      	b.n	8002796 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_SPI_Transmit+0x52>
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800258e:	e102      	b.n	8002796 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2203      	movs	r2, #3
 8002594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d6:	d10f      	bne.n	80025f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d007      	beq.n	8002616 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800261e:	d14b      	bne.n	80026b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_SPI_Transmit+0xf6>
 8002628:	8afb      	ldrh	r3, [r7, #22]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d13e      	bne.n	80026ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	881a      	ldrh	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	1c9a      	adds	r2, r3, #2
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002652:	e02b      	b.n	80026ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d112      	bne.n	8002688 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	881a      	ldrh	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	1c9a      	adds	r2, r3, #2
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	86da      	strh	r2, [r3, #54]	; 0x36
 8002686:	e011      	b.n	80026ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002688:	f7fe fd5a 	bl	8001140 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d803      	bhi.n	80026a0 <HAL_SPI_Transmit+0x168>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d102      	bne.n	80026a6 <HAL_SPI_Transmit+0x16e>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026aa:	e074      	b.n	8002796 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1ce      	bne.n	8002654 <HAL_SPI_Transmit+0x11c>
 80026b6:	e04c      	b.n	8002752 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_SPI_Transmit+0x18e>
 80026c0:	8afb      	ldrh	r3, [r7, #22]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d140      	bne.n	8002748 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026ec:	e02c      	b.n	8002748 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d113      	bne.n	8002724 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	86da      	strh	r2, [r3, #54]	; 0x36
 8002722:	e011      	b.n	8002748 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002724:	f7fe fd0c 	bl	8001140 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d803      	bhi.n	800273c <HAL_SPI_Transmit+0x204>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d102      	bne.n	8002742 <HAL_SPI_Transmit+0x20a>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002746:	e026      	b.n	8002796 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1cd      	bne.n	80026ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f9fc 	bl	8002b54 <SPI_EndRxTxTransaction>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	77fb      	strb	r3, [r7, #31]
 8002792:	e000      	b.n	8002796 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_SPI_Transmit_DMA+0x20>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e09b      	b.n	8002908 <HAL_SPI_Transmit_DMA+0x158>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d002      	beq.n	80027ea <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
 80027e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027e8:	e089      	b.n	80028fe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_Transmit_DMA+0x46>
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027fa:	e080      	b.n	80028fe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2203      	movs	r2, #3
 8002800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002842:	d10f      	bne.n	8002864 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002852:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002862:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_SPI_Transmit_DMA+0x160>)
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_SPI_Transmit_DMA+0x164>)
 8002872:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002878:	4a27      	ldr	r2, [pc, #156]	; (8002918 <HAL_SPI_Transmit_DMA+0x168>)
 800287a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002880:	2200      	movs	r2, #0
 8002882:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4619      	mov	r1, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	330c      	adds	r3, #12
 8002894:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800289c:	f7fe fde6 	bl	800146c <HAL_DMA_Start_IT>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80028be:	e01e      	b.n	80028fe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d007      	beq.n	80028de <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0202 	orr.w	r2, r2, #2
 80028fc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	080029e7 	.word	0x080029e7
 8002914:	08002941 	.word	0x08002941
 8002918:	08002a03 	.word	0x08002a03

0800291c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800294e:	f7fe fbf7 	bl	8001140 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b20      	cmp	r3, #32
 8002960:	d03b      	beq.n	80029da <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0220 	bic.w	r2, r2, #32
 8002970:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0202 	bic.w	r2, r2, #2
 8002980:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	2164      	movs	r1, #100	; 0x64
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f000 f8e4 	bl	8002b54 <SPI_EndRxTxTransaction>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2200      	movs	r2, #0
 80029c0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ffab 	bl	800292e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80029d8:	e002      	b.n	80029e0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7fd fbb6 	bl	800014c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff ff91 	bl	800291c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0203 	bic.w	r2, r2, #3
 8002a1e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f043 0210 	orr.w	r2, r3, #16
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff ff7a 	bl	800292e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a54:	f7fe fb74 	bl	8001140 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a64:	f7fe fb6c 	bl	8001140 <HAL_GetTick>
 8002a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	015b      	lsls	r3, r3, #5
 8002a70:	0d1b      	lsrs	r3, r3, #20
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a7a:	e054      	b.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a82:	d050      	beq.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a84:	f7fe fb5c 	bl	8001140 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d902      	bls.n	8002a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d13d      	bne.n	8002b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ab2:	d111      	bne.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002abc:	d004      	beq.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d107      	bne.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae0:	d10f      	bne.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e017      	b.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d19b      	bne.n	8002a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000004 	.word	0x20000004

08002b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff ff6a 	bl	8002a44 <SPI_WaitFlagStateUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e000      	b.n	8002b88 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e041      	b.n	8002c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe f896 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 fd44 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e041      	b.n	8002cc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f839 	bl	8002ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f000 fcf5 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_TIM_PWM_Start_DMA+0x28>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e022      	b.n	8002d4e <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d109      	bne.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x42>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e015      	b.n	8002d4e <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d109      	bne.n	8002d3c <HAL_TIM_PWM_Start_DMA+0x5c>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e008      	b.n	8002d4e <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	e14e      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_TIM_PWM_Start_DMA+0x90>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e022      	b.n	8002db6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d109      	bne.n	8002d8a <HAL_TIM_PWM_Start_DMA+0xaa>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	bf0c      	ite	eq
 8002d82:	2301      	moveq	r3, #1
 8002d84:	2300      	movne	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	e015      	b.n	8002db6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d109      	bne.n	8002da4 <HAL_TIM_PWM_Start_DMA+0xc4>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e008      	b.n	8002db6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d024      	beq.n	8002e04 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start_DMA+0xea>
 8002dc0:	887b      	ldrh	r3, [r7, #2]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e114      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start_DMA+0xfa>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd8:	e016      	b.n	8002e08 <HAL_TIM_PWM_Start_DMA+0x128>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start_DMA+0x10a>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de8:	e00e      	b.n	8002e08 <HAL_TIM_PWM_Start_DMA+0x128>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start_DMA+0x11a>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df8:	e006      	b.n	8002e08 <HAL_TIM_PWM_Start_DMA+0x128>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e02:	e001      	b.n	8002e08 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0f5      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x314>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	f200 80ae 	bhi.w	8002f6c <HAL_TIM_PWM_Start_DMA+0x28c>
 8002e10:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <HAL_TIM_PWM_Start_DMA+0x138>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	08002f6d 	.word	0x08002f6d
 8002e20:	08002f6d 	.word	0x08002f6d
 8002e24:	08002f6d 	.word	0x08002f6d
 8002e28:	08002e95 	.word	0x08002e95
 8002e2c:	08002f6d 	.word	0x08002f6d
 8002e30:	08002f6d 	.word	0x08002f6d
 8002e34:	08002f6d 	.word	0x08002f6d
 8002e38:	08002edd 	.word	0x08002edd
 8002e3c:	08002f6d 	.word	0x08002f6d
 8002e40:	08002f6d 	.word	0x08002f6d
 8002e44:	08002f6d 	.word	0x08002f6d
 8002e48:	08002f25 	.word	0x08002f25
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	4a6a      	ldr	r2, [pc, #424]	; (8002ffc <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	4a69      	ldr	r2, [pc, #420]	; (8003000 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	4a68      	ldr	r2, [pc, #416]	; (8003004 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3334      	adds	r3, #52	; 0x34
 8002e70:	461a      	mov	r2, r3
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	f7fe fafa 	bl	800146c <HAL_DMA_Start_IT>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0b8      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e90:	60da      	str	r2, [r3, #12]
      break;
 8002e92:	e06c      	b.n	8002f6e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	4a57      	ldr	r2, [pc, #348]	; (8003000 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	4a56      	ldr	r2, [pc, #344]	; (8003004 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3338      	adds	r3, #56	; 0x38
 8002eb8:	461a      	mov	r2, r3
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	f7fe fad6 	bl	800146c <HAL_DMA_Start_IT>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e094      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed8:	60da      	str	r2, [r3, #12]
      break;
 8002eda:	e048      	b.n	8002f6e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a46      	ldr	r2, [pc, #280]	; (8002ffc <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4a45      	ldr	r2, [pc, #276]	; (8003000 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	4a44      	ldr	r2, [pc, #272]	; (8003004 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	333c      	adds	r3, #60	; 0x3c
 8002f00:	461a      	mov	r2, r3
 8002f02:	887b      	ldrh	r3, [r7, #2]
 8002f04:	f7fe fab2 	bl	800146c <HAL_DMA_Start_IT>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e070      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f20:	60da      	str	r2, [r3, #12]
      break;
 8002f22:	e024      	b.n	8002f6e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	4a34      	ldr	r2, [pc, #208]	; (8002ffc <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	4a33      	ldr	r2, [pc, #204]	; (8003000 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	4a32      	ldr	r2, [pc, #200]	; (8003004 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3340      	adds	r3, #64	; 0x40
 8002f48:	461a      	mov	r2, r3
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	f7fe fa8e 	bl	800146c <HAL_DMA_Start_IT>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e04c      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f68:	60da      	str	r2, [r3, #12]
      break;
 8002f6a:	e000      	b.n	8002f6e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8002f6c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2201      	movs	r2, #1
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fdf0 	bl	8003b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a21      	ldr	r2, [pc, #132]	; (8003008 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d107      	bne.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_TIM_PWM_Start_DMA+0x2de>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d009      	beq.n	8002fbe <HAL_TIM_PWM_Start_DMA+0x2de>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_TIM_PWM_Start_DMA+0x2de>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a15      	ldr	r2, [pc, #84]	; (8003010 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d111      	bne.n	8002fe2 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b06      	cmp	r3, #6
 8002fce:	d010      	beq.n	8002ff2 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe0:	e007      	b.n	8002ff2 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	0800354b 	.word	0x0800354b
 8003000:	080035f3 	.word	0x080035f3
 8003004:	080034b9 	.word	0x080034b9
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800

08003014 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d855      	bhi.n	80030d0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003024:	a201      	add	r2, pc, #4	; (adr r2, 800302c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	08003061 	.word	0x08003061
 8003030:	080030d1 	.word	0x080030d1
 8003034:	080030d1 	.word	0x080030d1
 8003038:	080030d1 	.word	0x080030d1
 800303c:	0800307d 	.word	0x0800307d
 8003040:	080030d1 	.word	0x080030d1
 8003044:	080030d1 	.word	0x080030d1
 8003048:	080030d1 	.word	0x080030d1
 800304c:	08003099 	.word	0x08003099
 8003050:	080030d1 	.word	0x080030d1
 8003054:	080030d1 	.word	0x080030d1
 8003058:	080030d1 	.word	0x080030d1
 800305c:	080030b5 	.word	0x080030b5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800306e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fa59 	bl	800152c <HAL_DMA_Abort_IT>
      break;
 800307a:	e02a      	b.n	80030d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fa4b 	bl	800152c <HAL_DMA_Abort_IT>
      break;
 8003096:	e01c      	b.n	80030d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fa3d 	bl	800152c <HAL_DMA_Abort_IT>
      break;
 80030b2:	e00e      	b.n	80030d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fa2f 	bl	800152c <HAL_DMA_Abort_IT>
      break;
 80030ce:	e000      	b.n	80030d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80030d0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fd3e 	bl	8003b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <HAL_TIM_PWM_Stop_DMA+0x178>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d117      	bne.n	800311a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <HAL_TIM_PWM_Stop_DMA+0x106>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	f240 4344 	movw	r3, #1092	; 0x444
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_TIM_PWM_Stop_DMA+0x106>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a1a      	ldr	r2, [r3, #32]
 8003120:	f241 1311 	movw	r3, #4369	; 0x1111
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_TIM_PWM_Stop_DMA+0x136>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	f240 4344 	movw	r3, #1092	; 0x444
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d107      	bne.n	800314a <HAL_TIM_PWM_Stop_DMA+0x136>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Stop_DMA+0x146>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003158:	e013      	b.n	8003182 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Stop_DMA+0x156>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003168:	e00b      	b.n	8003182 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d104      	bne.n	800317a <HAL_TIM_PWM_Stop_DMA+0x166>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003178:	e003      	b.n	8003182 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40012c00 	.word	0x40012c00

08003190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0ac      	b.n	8003304 <HAL_TIM_PWM_ConfigChannel+0x174>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	f200 809f 	bhi.w	80032f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80031ba:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	080031f5 	.word	0x080031f5
 80031c4:	080032f9 	.word	0x080032f9
 80031c8:	080032f9 	.word	0x080032f9
 80031cc:	080032f9 	.word	0x080032f9
 80031d0:	08003235 	.word	0x08003235
 80031d4:	080032f9 	.word	0x080032f9
 80031d8:	080032f9 	.word	0x080032f9
 80031dc:	080032f9 	.word	0x080032f9
 80031e0:	08003277 	.word	0x08003277
 80031e4:	080032f9 	.word	0x080032f9
 80031e8:	080032f9 	.word	0x080032f9
 80031ec:	080032f9 	.word	0x080032f9
 80031f0:	080032b7 	.word	0x080032b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fa90 	bl	8003720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0208 	orr.w	r2, r2, #8
 800320e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0204 	bic.w	r2, r2, #4
 800321e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6999      	ldr	r1, [r3, #24]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	619a      	str	r2, [r3, #24]
      break;
 8003232:	e062      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fad6 	bl	80037ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6999      	ldr	r1, [r3, #24]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	021a      	lsls	r2, r3, #8
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	619a      	str	r2, [r3, #24]
      break;
 8003274:	e041      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fb1f 	bl	80038c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0208 	orr.w	r2, r2, #8
 8003290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0204 	bic.w	r2, r2, #4
 80032a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69d9      	ldr	r1, [r3, #28]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	61da      	str	r2, [r3, #28]
      break;
 80032b4:	e021      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fb69 	bl	8003994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69d9      	ldr	r1, [r3, #28]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	021a      	lsls	r2, r3, #8
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	61da      	str	r2, [r3, #28]
      break;
 80032f6:	e000      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_TIM_ConfigClockSource+0x18>
 8003320:	2302      	movs	r3, #2
 8003322:	e0b3      	b.n	800348c <HAL_TIM_ConfigClockSource+0x180>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800334a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335c:	d03e      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0xd0>
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003362:	f200 8087 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x168>
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	f000 8085 	beq.w	8003478 <HAL_TIM_ConfigClockSource+0x16c>
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003372:	d87f      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x168>
 8003374:	2b70      	cmp	r3, #112	; 0x70
 8003376:	d01a      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0xa2>
 8003378:	2b70      	cmp	r3, #112	; 0x70
 800337a:	d87b      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x168>
 800337c:	2b60      	cmp	r3, #96	; 0x60
 800337e:	d050      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x116>
 8003380:	2b60      	cmp	r3, #96	; 0x60
 8003382:	d877      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x168>
 8003384:	2b50      	cmp	r3, #80	; 0x50
 8003386:	d03c      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0xf6>
 8003388:	2b50      	cmp	r3, #80	; 0x50
 800338a:	d873      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x168>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d058      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x136>
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d86f      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x168>
 8003394:	2b30      	cmp	r3, #48	; 0x30
 8003396:	d064      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x156>
 8003398:	2b30      	cmp	r3, #48	; 0x30
 800339a:	d86b      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x168>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d060      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x156>
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d867      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x168>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05c      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x156>
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d05a      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033ac:	e062      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f000 fbae 	bl	8003b1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	609a      	str	r2, [r3, #8]
      break;
 80033da:	e04e      	b.n	800347a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6899      	ldr	r1, [r3, #8]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f000 fb97 	bl	8003b1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fe:	609a      	str	r2, [r3, #8]
      break;
 8003400:	e03b      	b.n	800347a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	461a      	mov	r2, r3
 8003410:	f000 fb0e 	bl	8003a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2150      	movs	r1, #80	; 0x50
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fb65 	bl	8003aea <TIM_ITRx_SetConfig>
      break;
 8003420:	e02b      	b.n	800347a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	461a      	mov	r2, r3
 8003430:	f000 fb2c 	bl	8003a8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2160      	movs	r1, #96	; 0x60
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fb55 	bl	8003aea <TIM_ITRx_SetConfig>
      break;
 8003440:	e01b      	b.n	800347a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	461a      	mov	r2, r3
 8003450:	f000 faee 	bl	8003a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2140      	movs	r1, #64	; 0x40
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fb45 	bl	8003aea <TIM_ITRx_SetConfig>
      break;
 8003460:	e00b      	b.n	800347a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f000 fb3c 	bl	8003aea <TIM_ITRx_SetConfig>
        break;
 8003472:	e002      	b.n	800347a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003474:	bf00      	nop
 8003476:	e000      	b.n	800347a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003478:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d107      	bne.n	80034e0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034de:	e02a      	b.n	8003536 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d107      	bne.n	80034fa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2202      	movs	r2, #2
 80034ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	e01d      	b.n	8003536 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	d107      	bne.n	8003514 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2204      	movs	r2, #4
 8003508:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003512:	e010      	b.n	8003536 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d107      	bne.n	800352e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2208      	movs	r2, #8
 8003522:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800352c:	e003      	b.n	8003536 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff ffb5 	bl	80034a6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	771a      	strb	r2, [r3, #28]
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	429a      	cmp	r2, r3
 8003560:	d10b      	bne.n	800357a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d136      	bne.n	80035de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	e031      	b.n	80035de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d10b      	bne.n	800359c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2202      	movs	r2, #2
 8003588:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d125      	bne.n	80035de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800359a:	e020      	b.n	80035de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d10b      	bne.n	80035be <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2204      	movs	r2, #4
 80035aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d114      	bne.n	80035de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035bc:	e00f      	b.n	80035de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d10a      	bne.n	80035de <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2208      	movs	r2, #8
 80035cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7fd fc82 	bl	8000ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	771a      	strb	r2, [r3, #28]
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d103      	bne.n	8003612 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	771a      	strb	r2, [r3, #28]
 8003610:	e019      	b.n	8003646 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d103      	bne.n	8003624 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2202      	movs	r2, #2
 8003620:	771a      	strb	r2, [r3, #28]
 8003622:	e010      	b.n	8003646 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d103      	bne.n	8003636 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2204      	movs	r2, #4
 8003632:	771a      	strb	r2, [r3, #28]
 8003634:	e007      	b.n	8003646 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d102      	bne.n	8003646 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2208      	movs	r2, #8
 8003644:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff ff24 	bl	8003494 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	771a      	strb	r2, [r3, #28]
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a29      	ldr	r2, [pc, #164]	; (8003714 <TIM_Base_SetConfig+0xb8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00b      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d007      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a26      	ldr	r2, [pc, #152]	; (8003718 <TIM_Base_SetConfig+0xbc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a25      	ldr	r2, [pc, #148]	; (800371c <TIM_Base_SetConfig+0xc0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <TIM_Base_SetConfig+0xb8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <TIM_Base_SetConfig+0xbc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a18      	ldr	r2, [pc, #96]	; (800371c <TIM_Base_SetConfig+0xc0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <TIM_Base_SetConfig+0xb8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d103      	bne.n	8003704 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	615a      	str	r2, [r3, #20]
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800

08003720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0201 	bic.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f023 0302 	bic.w	r3, r3, #2
 8003768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <TIM_OC1_SetConfig+0xc8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10c      	bne.n	8003796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0308 	bic.w	r3, r3, #8
 8003782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <TIM_OC1_SetConfig+0xc8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d111      	bne.n	80037c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40012c00 	.word	0x40012c00

080037ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0210 	bic.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0320 	bic.w	r3, r3, #32
 8003836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <TIM_OC2_SetConfig+0xd0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a14      	ldr	r2, [pc, #80]	; (80038bc <TIM_OC2_SetConfig+0xd0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d113      	bne.n	8003898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800387e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	40012c00 	.word	0x40012c00

080038c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <TIM_OC3_SetConfig+0xd0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10d      	bne.n	800393a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <TIM_OC3_SetConfig+0xd0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d113      	bne.n	800396a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	621a      	str	r2, [r3, #32]
}
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40012c00 	.word	0x40012c00

08003994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <TIM_OC4_SetConfig+0x98>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d109      	bne.n	8003a08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	40012c00 	.word	0x40012c00

08003a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 030a 	bic.w	r3, r3, #10
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f023 0210 	bic.w	r2, r3, #16
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ab6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	031b      	lsls	r3, r3, #12
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f043 0307 	orr.w	r3, r3, #7
 8003b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	609a      	str	r2, [r3, #8]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b087      	sub	sp, #28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	609a      	str	r2, [r3, #8]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2201      	movs	r2, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	401a      	ands	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e046      	b.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d009      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800

08003c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e03f      	b.n	8003cf2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd f8a6 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	; 0x24
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f829 	bl	8003cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d36:	f023 030c 	bic.w	r3, r3, #12
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <UART_SetConfig+0x114>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d64:	f7fe fb32 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	e002      	b.n	8003d72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fb1a 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8003d70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009a      	lsls	r2, r3, #2
 8003d7c:	441a      	add	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <UART_SetConfig+0x118>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	0119      	lsls	r1, r3, #4
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009a      	lsls	r2, r3, #2
 8003d9c:	441a      	add	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <UART_SetConfig+0x118>)
 8003daa:	fba3 0302 	umull	r0, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2064      	movs	r0, #100	; 0x64
 8003db2:	fb00 f303 	mul.w	r3, r0, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <UART_SetConfig+0x118>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc8:	4419      	add	r1, r3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009a      	lsls	r2, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <UART_SetConfig+0x118>)
 8003de2:	fba3 0302 	umull	r0, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2064      	movs	r0, #100	; 0x64
 8003dea:	fb00 f303 	mul.w	r3, r0, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <UART_SetConfig+0x118>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	440a      	add	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40013800 	.word	0x40013800
 8003e14:	51eb851f 	.word	0x51eb851f

08003e18 <__libc_init_array>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	2600      	movs	r6, #0
 8003e1c:	4d0c      	ldr	r5, [pc, #48]	; (8003e50 <__libc_init_array+0x38>)
 8003e1e:	4c0d      	ldr	r4, [pc, #52]	; (8003e54 <__libc_init_array+0x3c>)
 8003e20:	1b64      	subs	r4, r4, r5
 8003e22:	10a4      	asrs	r4, r4, #2
 8003e24:	42a6      	cmp	r6, r4
 8003e26:	d109      	bne.n	8003e3c <__libc_init_array+0x24>
 8003e28:	f000 f822 	bl	8003e70 <_init>
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	4d0a      	ldr	r5, [pc, #40]	; (8003e58 <__libc_init_array+0x40>)
 8003e30:	4c0a      	ldr	r4, [pc, #40]	; (8003e5c <__libc_init_array+0x44>)
 8003e32:	1b64      	subs	r4, r4, r5
 8003e34:	10a4      	asrs	r4, r4, #2
 8003e36:	42a6      	cmp	r6, r4
 8003e38:	d105      	bne.n	8003e46 <__libc_init_array+0x2e>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e40:	4798      	blx	r3
 8003e42:	3601      	adds	r6, #1
 8003e44:	e7ee      	b.n	8003e24 <__libc_init_array+0xc>
 8003e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4a:	4798      	blx	r3
 8003e4c:	3601      	adds	r6, #1
 8003e4e:	e7f2      	b.n	8003e36 <__libc_init_array+0x1e>
 8003e50:	08003eb0 	.word	0x08003eb0
 8003e54:	08003eb0 	.word	0x08003eb0
 8003e58:	08003eb0 	.word	0x08003eb0
 8003e5c:	08003eb4 	.word	0x08003eb4

08003e60 <memset>:
 8003e60:	4603      	mov	r3, r0
 8003e62:	4402      	add	r2, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <_init>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr

08003e7c <_fini>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr
